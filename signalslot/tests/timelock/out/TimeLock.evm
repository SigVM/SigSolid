    /* "timelock_parsed.sol":26:4152  contract TimeLock {... */
  mstore(0x40, 0x80)
    /* "timelock_parsed.sol":193:197  4320 */
  0x10e0
    /* "timelock_parsed.sol":178:197  uint ONE_DAY = 4320 */
  0x00
  sstore
    /* "timelock_parsed.sol":2899:3639  constructor() public {... */
  callvalue
  dup1
  iszero
  tag_1
  jumpi
  0x00
  dup1
  revert
tag_1:
  pop
    /* "timelock_parsed.sol":2925:2934  TimesUp() */
  tag_4
    /* "timelock_parsed.sol":2925:2932  TimesUp */
  shl(0x20, tag_5)
    /* "timelock_parsed.sol":2925:2934  TimesUp() */
  0x20
  shr
  jump	// in
tag_4:
    /* "timelock_parsed.sol":2939:2951  TxExecutor() */
  tag_6
    /* "timelock_parsed.sol":2939:2949  TxExecutor */
  shl(0x20, tag_7)
    /* "timelock_parsed.sol":2939:2951  TxExecutor() */
  0x20
  shr
  jump	// in
tag_6:
    /* "timelock_parsed.sol":3203:3232  address this_bindslot_address */
  0x00
    /* "timelock_parsed.sol":3243:3247  this */
  address
    /* "timelock_parsed.sol":3203:3248  address this_bindslot_address = address(this) */
  swap1
  pop
    /* "timelock_parsed.sol":3300:3333  bytes32 this_bindslot_TimesUp_key */
  0x00
    /* "timelock_parsed.sol":3336:3353  get_TimesUp_key() */
  tag_8
    /* "timelock_parsed.sol":3336:3351  get_TimesUp_key */
  shl(0x20, tag_9)
    /* "timelock_parsed.sol":3336:3353  get_TimesUp_key() */
  0x20
  shr
  jump	// in
tag_8:
    /* "timelock_parsed.sol":3300:3353  bytes32 this_bindslot_TimesUp_key = get_TimesUp_key() */
  swap1
  pop
    /* "timelock_parsed.sol":3496:3515  TxExecutor_key_slot */
  0x07
    /* "timelock_parsed.sol":3490:3516  sload(TxExecutor_key_slot) */
  sload
    /* "timelock_parsed.sol":3463:3488  this_bindslot_TimesUp_key */
  dup2
    /* "timelock_parsed.sol":3440:3461  this_bindslot_address */
  dup4
    /* "timelock_parsed.sol":3431:3517  bindslot(this_bindslot_address, this_bindslot_TimesUp_key, sload(TxExecutor_key_slot)) */
  bindslot
    /* "timelock_parsed.sol":3425:3429  0x40 */
  0x40
    /* "timelock_parsed.sol":3418:3518  mstore(0x40, bindslot(this_bindslot_address, this_bindslot_TimesUp_key, sload(TxExecutor_key_slot))) */
  mstore
    /* "timelock_parsed.sol":3413:3525  {... */
  pop
  pop
    /* "timelock_parsed.sol":26:4152  contract TimeLock {... */
  jump(tag_10)
    /* "timelock_parsed.sol":1364:1593  function TimesUp() private {... */
tag_5:
    /* "timelock_parsed.sol":1415:1446  keccak256("function TimesUp()") */
  mload(0x40)
  dup1
  dup1
  0x66756e6374696f6e2054696d6573557028290000000000000000000000000000
  dup2
  mstore
  pop
  0x12
  add
  swap1
  pop
  mload(0x40)
  dup1
  swap2
  sub
  swap1
  keccak256
    /* "timelock_parsed.sol":1401:1412  TimesUp_key */
  0x05
    /* "timelock_parsed.sol":1401:1446  TimesUp_key = keccak256("function TimesUp()") */
  dup2
  swap1
  sstore
  pop
    /* "timelock_parsed.sol":1512:1528  TimesUp_key_slot */
  0x05
    /* "timelock_parsed.sol":1506:1529  sload(TimesUp_key_slot) */
  sload
    /* "timelock_parsed.sol":1502:1504  32 */
  0x20
    /* "timelock_parsed.sol":1492:1530  createsig(32, sload(TimesUp_key_slot)) */
  createsig
    /* "timelock_parsed.sol":1471:1490  TimesUp_status_slot */
  0x04
    /* "timelock_parsed.sol":1464:1531  sstore(TimesUp_status_slot, createsig(32, sload(TimesUp_key_slot))) */
  sstore
    /* "timelock_parsed.sol":1565:1582  TimesUp_data_slot */
  0x02
    /* "timelock_parsed.sol":1542:1563  TimesUp_dataslot_slot */
  0x03
    /* "timelock_parsed.sol":1535:1583  sstore(TimesUp_dataslot_slot, TimesUp_data_slot) */
  sstore
    /* "timelock_parsed.sol":1459:1587  {... */
  jump	// out
    /* "timelock_parsed.sol":2115:2343  function TxExecutor() private {... */
tag_7:
    /* "timelock_parsed.sol":2172:2209  keccak256("TxExecutor_func(bytes32)") */
  mload(0x40)
  dup1
  dup1
  0x54784578656375746f725f66756e632862797465733332290000000000000000
  dup2
  mstore
  pop
  0x18
  add
  swap1
  pop
  mload(0x40)
  dup1
  swap2
  sub
  swap1
  keccak256
    /* "timelock_parsed.sol":2155:2169  TxExecutor_key */
  0x07
    /* "timelock_parsed.sol":2155:2209  TxExecutor_key = keccak256("TxExecutor_func(bytes32)") */
  dup2
  swap1
  sstore
  pop
    /* "timelock_parsed.sol":2305:2324  TxExecutor_key_slot */
  0x07
    /* "timelock_parsed.sol":2299:2325  sload(TxExecutor_key_slot) */
  sload
    /* "timelock_parsed.sol":2292:2297  30000 */
  0x7530
    /* "timelock_parsed.sol":2288:2290  10 */
  0x0a
    /* "timelock_parsed.sol":2284:2286  32 */
  0x20
    /* "timelock_parsed.sol":2273:2326  createslot(32, 10, 30000, sload(TxExecutor_key_slot)) */
  createslot
    /* "timelock_parsed.sol":2249:2271  TxExecutor_status_slot */
  0x06
    /* "timelock_parsed.sol":2242:2327  sstore(TxExecutor_status_slot, createslot(32, 10, 30000, sload(TxExecutor_key_slot))) */
  sstore
    /* "timelock_parsed.sol":2228:2337  {... */
  jump	// out
    /* "timelock_parsed.sol":969:1064  function get_TimesUp_key() public view returns (bytes32 key) {... */
tag_9:
    /* "timelock_parsed.sol":1017:1028  bytes32 key */
  0x00
    /* "timelock_parsed.sol":1046:1057  TimesUp_key */
  sload(0x05)
    /* "timelock_parsed.sol":1039:1057  return TimesUp_key */
  swap1
  pop
    /* "timelock_parsed.sol":969:1064  function get_TimesUp_key() public view returns (bytes32 key) {... */
  swap1
  jump	// out
    /* "timelock_parsed.sol":26:4152  contract TimeLock {... */
tag_10:
  dataSize(sub_0)
  dup1
  dataOffset(sub_0)
  0x00
  codecopy
  0x00
  return
stop

sub_0: assembly {
        /* "timelock_parsed.sol":26:4152  contract TimeLock {... */
      mstore(0x40, 0x80)
      callvalue
      dup1
      iszero
      tag_1
      jumpi
      0x00
      dup1
      revert
    tag_1:
      pop
      jumpi(tag_2, lt(calldatasize, 0x04))
      shr(0xe0, calldataload(0x00))
      dup1
      0x25b33efa
      eq
      tag_3
      jumpi
      dup1
      0x37d29d41
      eq
      tag_4
      jumpi
      dup1
      0x3a66f901
      eq
      tag_5
      jumpi
      dup1
      0xaacffb5e
      eq
      tag_6
      jumpi
      dup1
      0xbf175876
      eq
      tag_7
      jumpi
      dup1
      0xf3fbec19
      eq
      tag_8
      jumpi
    tag_2:
      0x00
      dup1
      revert
        /* "timelock_parsed.sol":855:940  function get_TimesUp_argc() public pure returns (uint argc) {... */
    tag_3:
      tag_9
      tag_10
      jump	// in
    tag_9:
      mload(0x40)
      dup1
      dup3
      dup2
      mstore
      0x20
      add
      swap2
      pop
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      return
        /* "timelock_parsed.sol":1095:1210  function get_TimesUp_dataslot() public view returns (bytes memory dataslot) {... */
    tag_4:
      tag_11
      tag_12
      jump	// in
    tag_11:
      mload(0x40)
      dup1
      dup1
      0x20
      add
      dup3
      dup2
      sub
      dup3
      mstore
      dup4
      dup2
      dup2
      mload
      dup2
      mstore
      0x20
      add
      swap2
      pop
      dup1
      mload
      swap1
      0x20
      add
      swap1
      dup1
      dup4
      dup4
      0x00
    tag_13:
      dup4
      dup2
      lt
      iszero
      tag_15
      jumpi
      dup1
      dup3
      add
      mload
      dup2
      dup5
      add
      mstore
      0x20
      dup2
      add
      swap1
      pop
      jump(tag_13)
    tag_15:
      pop
      pop
      pop
      pop
      swap1
      pop
      swap1
      dup2
      add
      swap1
      0x1f
      and
      dup1
      iszero
      tag_16
      jumpi
      dup1
      dup3
      sub
      dup1
      mload
      0x01
      dup4
      0x20
      sub
      0x0100
      exp
      sub
      not
      and
      dup2
      mstore
      0x20
      add
      swap2
      pop
    tag_16:
      pop
      swap3
      pop
      pop
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      return
        /* "timelock_parsed.sol":3650:3904  function queueTransaction(address target, uint value, string memory signature, ... */
    tag_5:
      tag_17
      0x04
      dup1
      calldatasize
      sub
      0xa0
      dup2
      lt
      iszero
      tag_18
      jumpi
      0x00
      dup1
      revert
    tag_18:
      dup2
      add
      swap1
      dup1
      dup1
      calldataload
      0xffffffffffffffffffffffffffffffffffffffff
      and
      swap1
      0x20
      add
      swap1
      swap3
      swap2
      swap1
      dup1
      calldataload
      swap1
      0x20
      add
      swap1
      swap3
      swap2
      swap1
      dup1
      calldataload
      swap1
      0x20
      add
      swap1
      0x0100000000
      dup2
      gt
      iszero
      tag_19
      jumpi
      0x00
      dup1
      revert
    tag_19:
      dup3
      add
      dup4
      0x20
      dup3
      add
      gt
      iszero
      tag_20
      jumpi
      0x00
      dup1
      revert
    tag_20:
      dup1
      calldataload
      swap1
      0x20
      add
      swap2
      dup5
      0x01
      dup4
      mul
      dup5
      add
      gt
      0x0100000000
      dup4
      gt
      or
      iszero
      tag_21
      jumpi
      0x00
      dup1
      revert
    tag_21:
      swap2
      swap1
      dup1
      dup1
      0x1f
      add
      0x20
      dup1
      swap2
      div
      mul
      0x20
      add
      mload(0x40)
      swap1
      dup2
      add
      0x40
      mstore
      dup1
      swap4
      swap3
      swap2
      swap1
      dup2
      dup2
      mstore
      0x20
      add
      dup4
      dup4
      dup1
      dup3
      dup5
      calldatacopy
      0x00
      dup2
      dup5
      add
      mstore
      not(0x1f)
      0x1f
      dup3
      add
      and
      swap1
      pop
      dup1
      dup4
      add
      swap3
      pop
      pop
      pop
      pop
      pop
      pop
      pop
      swap2
      swap3
      swap2
      swap3
      swap1
      dup1
      calldataload
      swap1
      0x20
      add
      swap1
      0x0100000000
      dup2
      gt
      iszero
      tag_22
      jumpi
      0x00
      dup1
      revert
    tag_22:
      dup3
      add
      dup4
      0x20
      dup3
      add
      gt
      iszero
      tag_23
      jumpi
      0x00
      dup1
      revert
    tag_23:
      dup1
      calldataload
      swap1
      0x20
      add
      swap2
      dup5
      0x01
      dup4
      mul
      dup5
      add
      gt
      0x0100000000
      dup4
      gt
      or
      iszero
      tag_24
      jumpi
      0x00
      dup1
      revert
    tag_24:
      swap2
      swap1
      dup1
      dup1
      0x1f
      add
      0x20
      dup1
      swap2
      div
      mul
      0x20
      add
      mload(0x40)
      swap1
      dup2
      add
      0x40
      mstore
      dup1
      swap4
      swap3
      swap2
      swap1
      dup2
      dup2
      mstore
      0x20
      add
      dup4
      dup4
      dup1
      dup3
      dup5
      calldatacopy
      0x00
      dup2
      dup5
      add
      mstore
      not(0x1f)
      0x1f
      dup3
      add
      and
      swap1
      pop
      dup1
      dup4
      add
      swap3
      pop
      pop
      pop
      pop
      pop
      pop
      pop
      swap2
      swap3
      swap2
      swap3
      swap1
      dup1
      calldataload
      swap1
      0x20
      add
      swap1
      swap3
      swap2
      swap1
      pop
      pop
      pop
      tag_25
      jump	// in
    tag_17:
      stop
        /* "timelock_parsed.sol":969:1064  function get_TimesUp_key() public view returns (bytes32 key) {... */
    tag_6:
      tag_26
      tag_27
      jump	// in
    tag_26:
      mload(0x40)
      dup1
      dup3
      dup2
      mstore
      0x20
      add
      swap2
      pop
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      return
        /* "timelock_parsed.sol":3915:4150  function cancelTransaction(address target, uint value, string memory signature, bytes memory data) public {... */
    tag_7:
      tag_28
      0x04
      dup1
      calldatasize
      sub
      0x80
      dup2
      lt
      iszero
      tag_29
      jumpi
      0x00
      dup1
      revert
    tag_29:
      dup2
      add
      swap1
      dup1
      dup1
      calldataload
      0xffffffffffffffffffffffffffffffffffffffff
      and
      swap1
      0x20
      add
      swap1
      swap3
      swap2
      swap1
      dup1
      calldataload
      swap1
      0x20
      add
      swap1
      swap3
      swap2
      swap1
      dup1
      calldataload
      swap1
      0x20
      add
      swap1
      0x0100000000
      dup2
      gt
      iszero
      tag_30
      jumpi
      0x00
      dup1
      revert
    tag_30:
      dup3
      add
      dup4
      0x20
      dup3
      add
      gt
      iszero
      tag_31
      jumpi
      0x00
      dup1
      revert
    tag_31:
      dup1
      calldataload
      swap1
      0x20
      add
      swap2
      dup5
      0x01
      dup4
      mul
      dup5
      add
      gt
      0x0100000000
      dup4
      gt
      or
      iszero
      tag_32
      jumpi
      0x00
      dup1
      revert
    tag_32:
      swap2
      swap1
      dup1
      dup1
      0x1f
      add
      0x20
      dup1
      swap2
      div
      mul
      0x20
      add
      mload(0x40)
      swap1
      dup2
      add
      0x40
      mstore
      dup1
      swap4
      swap3
      swap2
      swap1
      dup2
      dup2
      mstore
      0x20
      add
      dup4
      dup4
      dup1
      dup3
      dup5
      calldatacopy
      0x00
      dup2
      dup5
      add
      mstore
      not(0x1f)
      0x1f
      dup3
      add
      and
      swap1
      pop
      dup1
      dup4
      add
      swap3
      pop
      pop
      pop
      pop
      pop
      pop
      pop
      swap2
      swap3
      swap2
      swap3
      swap1
      dup1
      calldataload
      swap1
      0x20
      add
      swap1
      0x0100000000
      dup2
      gt
      iszero
      tag_33
      jumpi
      0x00
      dup1
      revert
    tag_33:
      dup3
      add
      dup4
      0x20
      dup3
      add
      gt
      iszero
      tag_34
      jumpi
      0x00
      dup1
      revert
    tag_34:
      dup1
      calldataload
      swap1
      0x20
      add
      swap2
      dup5
      0x01
      dup4
      mul
      dup5
      add
      gt
      0x0100000000
      dup4
      gt
      or
      iszero
      tag_35
      jumpi
      0x00
      dup1
      revert
    tag_35:
      swap2
      swap1
      dup1
      dup1
      0x1f
      add
      0x20
      dup1
      swap2
      div
      mul
      0x20
      add
      mload(0x40)
      swap1
      dup2
      add
      0x40
      mstore
      dup1
      swap4
      swap3
      swap2
      swap1
      dup2
      dup2
      mstore
      0x20
      add
      dup4
      dup4
      dup1
      dup3
      dup5
      calldatacopy
      0x00
      dup2
      dup5
      add
      mstore
      not(0x1f)
      0x1f
      dup3
      add
      and
      swap1
      pop
      dup1
      dup4
      add
      swap3
      pop
      pop
      pop
      pop
      pop
      pop
      pop
      swap2
      swap3
      swap2
      swap3
      swap1
      pop
      pop
      pop
      tag_36
      jump	// in
    tag_28:
      stop
        /* "timelock_parsed.sol":2575:2888  function TxExecutor_func(bytes32 tx_hash) public {... */
    tag_8:
      tag_37
      0x04
      dup1
      calldatasize
      sub
      0x20
      dup2
      lt
      iszero
      tag_38
      jumpi
      0x00
      dup1
      revert
    tag_38:
      dup2
      add
      swap1
      dup1
      dup1
      calldataload
      swap1
      0x20
      add
      swap1
      swap3
      swap2
      swap1
      pop
      pop
      pop
      tag_39
      jump	// in
    tag_37:
      stop
        /* "timelock_parsed.sol":855:940  function get_TimesUp_argc() public pure returns (uint argc) {... */
    tag_10:
        /* "timelock_parsed.sol":904:913  uint argc */
      0x00
        /* "timelock_parsed.sol":931:933  32 */
      0x20
        /* "timelock_parsed.sol":924:933  return 32 */
      swap1
      pop
        /* "timelock_parsed.sol":855:940  function get_TimesUp_argc() public pure returns (uint argc) {... */
      swap1
      jump	// out
        /* "timelock_parsed.sol":1095:1210  function get_TimesUp_dataslot() public view returns (bytes memory dataslot) {... */
    tag_12:
        /* "timelock_parsed.sol":1148:1169  bytes memory dataslot */
      0x60
        /* "timelock_parsed.sol":1187:1203  TimesUp_dataslot */
      0x03
        /* "timelock_parsed.sol":1180:1203  return TimesUp_dataslot */
      dup1
      sload
      0x01
      dup2
      0x01
      and
      iszero
      0x0100
      mul
      sub
      and
      0x02
      swap1
      div
      dup1
      0x1f
      add
      0x20
      dup1
      swap2
      div
      mul
      0x20
      add
      mload(0x40)
      swap1
      dup2
      add
      0x40
      mstore
      dup1
      swap3
      swap2
      swap1
      dup2
      dup2
      mstore
      0x20
      add
      dup3
      dup1
      sload
      0x01
      dup2
      0x01
      and
      iszero
      0x0100
      mul
      sub
      and
      0x02
      swap1
      div
      dup1
      iszero
      tag_42
      jumpi
      dup1
      0x1f
      lt
      tag_43
      jumpi
      0x0100
      dup1
      dup4
      sload
      div
      mul
      dup4
      mstore
      swap2
      0x20
      add
      swap2
      jump(tag_42)
    tag_43:
      dup3
      add
      swap2
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
    tag_44:
      dup2
      sload
      dup2
      mstore
      swap1
      0x01
      add
      swap1
      0x20
      add
      dup1
      dup4
      gt
      tag_44
      jumpi
      dup3
      swap1
      sub
      0x1f
      and
      dup3
      add
      swap2
    tag_42:
      pop
      pop
      pop
      pop
      pop
      swap1
      pop
        /* "timelock_parsed.sol":1095:1210  function get_TimesUp_dataslot() public view returns (bytes memory dataslot) {... */
      swap1
      jump	// out
        /* "timelock_parsed.sol":3650:3904  function queueTransaction(address target, uint value, string memory signature, ... */
    tag_25:
      pop
      pop
      pop
      pop
      pop
      jump	// out
        /* "timelock_parsed.sol":969:1064  function get_TimesUp_key() public view returns (bytes32 key) {... */
    tag_27:
        /* "timelock_parsed.sol":1017:1028  bytes32 key */
      0x00
        /* "timelock_parsed.sol":1046:1057  TimesUp_key */
      sload(0x05)
        /* "timelock_parsed.sol":1039:1057  return TimesUp_key */
      swap1
      pop
        /* "timelock_parsed.sol":969:1064  function get_TimesUp_key() public view returns (bytes32 key) {... */
      swap1
      jump	// out
        /* "timelock_parsed.sol":3915:4150  function cancelTransaction(address target, uint value, string memory signature, bytes memory data) public {... */
    tag_36:
        /* "timelock_parsed.sol":4040:4054  bytes32 txHash */
      0x00
        /* "timelock_parsed.sol":4078:4084  target */
      dup5
        /* "timelock_parsed.sol":4086:4091  value */
      dup5
        /* "timelock_parsed.sol":4093:4102  signature */
      dup5
        /* "timelock_parsed.sol":4104:4108  data */
      dup5
        /* "timelock_parsed.sol":4067:4109  abi.encode(target, value, signature, data) */
      add(0x20, mload(0x40))
      dup1
      dup6
      0xffffffffffffffffffffffffffffffffffffffff
      and
      0xffffffffffffffffffffffffffffffffffffffff
      and
      dup2
      mstore
      0x20
      add
      dup5
      dup2
      mstore
      0x20
      add
      dup1
      0x20
      add
      dup1
      0x20
      add
      dup4
      dup2
      sub
      dup4
      mstore
      dup6
      dup2
      dup2
      mload
      dup2
      mstore
      0x20
      add
      swap2
      pop
      dup1
      mload
      swap1
      0x20
      add
      swap1
      dup1
      dup4
      dup4
      0x00
    tag_48:
      dup4
      dup2
      lt
      iszero
      tag_50
      jumpi
      dup1
      dup3
      add
      mload
      dup2
      dup5
      add
      mstore
      0x20
      dup2
      add
      swap1
      pop
      jump(tag_48)
    tag_50:
      pop
      pop
      pop
      pop
      swap1
      pop
      swap1
      dup2
      add
      swap1
      0x1f
      and
      dup1
      iszero
      tag_51
      jumpi
      dup1
      dup3
      sub
      dup1
      mload
      0x01
      dup4
      0x20
      sub
      0x0100
      exp
      sub
      not
      and
      dup2
      mstore
      0x20
      add
      swap2
      pop
    tag_51:
      pop
      dup4
      dup2
      sub
      dup3
      mstore
      dup5
      dup2
      dup2
      mload
      dup2
      mstore
      0x20
      add
      swap2
      pop
      dup1
      mload
      swap1
      0x20
      add
      swap1
      dup1
      dup4
      dup4
      0x00
    tag_52:
      dup4
      dup2
      lt
      iszero
      tag_54
      jumpi
      dup1
      dup3
      add
      mload
      dup2
      dup5
      add
      mstore
      0x20
      dup2
      add
      swap1
      pop
      jump(tag_52)
    tag_54:
      pop
      pop
      pop
      pop
      swap1
      pop
      swap1
      dup2
      add
      swap1
      0x1f
      and
      dup1
      iszero
      tag_55
      jumpi
      dup1
      dup3
      sub
      dup1
      mload
      0x01
      dup4
      0x20
      sub
      0x0100
      exp
      sub
      not
      and
      dup2
      mstore
      0x20
      add
      swap2
      pop
    tag_55:
      pop
      swap7
      pop
      pop
      pop
      pop
      pop
      pop
      pop
      mload(0x40)
      0x20
      dup2
      dup4
      sub
      sub
      dup2
      mstore
      swap1
      0x40
      mstore
        /* "timelock_parsed.sol":4057:4110  keccak256(abi.encode(target, value, signature, data)) */
      dup1
      mload
      swap1
      0x20
      add
      keccak256
        /* "timelock_parsed.sol":4040:4110  bytes32 txHash = keccak256(abi.encode(target, value, signature, data)) */
      swap1
      pop
        /* "timelock_parsed.sol":4127:4135  queuedTx */
      0x01
        /* "timelock_parsed.sol":4127:4143  queuedTx[txHash] */
      0x00
        /* "timelock_parsed.sol":4136:4142  txHash */
      dup3
        /* "timelock_parsed.sol":4127:4143  queuedTx[txHash] */
      dup2
      mstore
      0x20
      add
      swap1
      dup2
      mstore
      0x20
      add
      0x00
      keccak256
      0x00
        /* "timelock_parsed.sol":4120:4143  delete queuedTx[txHash] */
      tag_56
      swap2
      swap1
      tag_57
      jump	// in
    tag_56:
        /* "timelock_parsed.sol":3915:4150  function cancelTransaction(address target, uint value, string memory signature, bytes memory data) public {... */
      pop
      pop
      pop
      pop
      pop
      jump	// out
        /* "timelock_parsed.sol":2575:2888  function TxExecutor_func(bytes32 tx_hash) public {... */
    tag_39:
      pop
      jump	// out
    tag_57:
      pop
      dup1
      sload
      0x00
      dup3
      sstore
      0x04
      mul
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      dup2
      add
      swap1
      tag_60
      swap2
      swap1
      tag_61
      jump	// in
    tag_60:
      pop
      jump	// out
    tag_61:
      tag_62
      swap2
      swap1
    tag_63:
      dup1
      dup3
      gt
      iszero
      tag_64
      jumpi
      0x00
      dup1
      dup3
      add
      exp(0x0100, 0x00)
      dup2
      sload
      swap1
      0xffffffffffffffffffffffffffffffffffffffff
      mul
      not
      and
      swap1
      sstore
      0x01
      dup3
      add
      0x00
      swap1
      sstore
      0x02
      dup3
      add
      0x00
      tag_65
      swap2
      swap1
      tag_66
      jump	// in
    tag_65:
      0x03
      dup3
      add
      0x00
      tag_67
      swap2
      swap1
      tag_68
      jump	// in
    tag_67:
      pop
      0x04
      add
      jump(tag_63)
    tag_64:
      pop
      swap1
      jump
    tag_62:
      swap1
      jump	// out
    tag_66:
      pop
      dup1
      sload
      0x01
      dup2
      0x01
      and
      iszero
      0x0100
      mul
      sub
      and
      0x02
      swap1
      div
      0x00
      dup3
      sstore
      dup1
      0x1f
      lt
      tag_70
      jumpi
      pop
      jump(tag_69)
    tag_70:
      0x1f
      add
      0x20
      swap1
      div
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      dup2
      add
      swap1
      tag_71
      swap2
      swap1
      tag_72
      jump	// in
    tag_71:
    tag_69:
      pop
      jump	// out
    tag_68:
      pop
      dup1
      sload
      0x01
      dup2
      0x01
      and
      iszero
      0x0100
      mul
      sub
      and
      0x02
      swap1
      div
      0x00
      dup3
      sstore
      dup1
      0x1f
      lt
      tag_74
      jumpi
      pop
      jump(tag_73)
    tag_74:
      0x1f
      add
      0x20
      swap1
      div
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      dup2
      add
      swap1
      tag_75
      swap2
      swap1
      tag_72
      jump	// in
    tag_75:
    tag_73:
      pop
      jump	// out
    tag_72:
      tag_76
      swap2
      swap1
    tag_77:
      dup1
      dup3
      gt
      iszero
      tag_78
      jumpi
      0x00
      dup2
      0x00
      swap1
      sstore
      pop
      0x01
      add
      jump(tag_77)
    tag_78:
      pop
      swap1
      jump
    tag_76:
      swap1
      jump	// out

    auxdata: 0xa26469706673582212202745f34377ef7e5f0a478a1b655b9f72961537eee3b2dcab567b3a02357e536764736f6c63782c302e362e31312d646576656c6f702e323032302e372e32322b636f6d6d69742e36646666643637632e6d6f64005d
}
