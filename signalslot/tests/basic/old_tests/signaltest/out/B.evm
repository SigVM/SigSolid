    /* "signaltest_parsed.sol":3871:6949  contract B {... */
  mstore(0x40, 0x80)
    /* "signaltest_parsed.sol":6904:6947  constructor() public {... */
  callvalue
  dup1
  iszero
  tag_1
  jumpi
  0x00
  dup1
  revert
tag_1:
  pop
    /* "signaltest_parsed.sol":6930:6944  priceReceive() */
  tag_4
    /* "signaltest_parsed.sol":6930:6942  priceReceive */
  shl(0x20, tag_5)
    /* "signaltest_parsed.sol":6930:6944  priceReceive() */
  0x20
  shr
  jump	// in
tag_4:
    /* "signaltest_parsed.sol":3871:6949  contract B {... */
  jump(tag_6)
    /* "signaltest_parsed.sol":4517:4753  function priceReceive() private {... */
tag_5:
    /* "signaltest_parsed.sol":4578:4616  keccak256("priceReceive_func(bytes3)") */
  mload(0x40)
  dup1
  dup1
  0x7072696365526563656976655f66756e63286279746573332900000000000000
  dup2
  mstore
  pop
  0x19
  add
  swap1
  pop
  mload(0x40)
  dup1
  swap2
  sub
  swap1
  keccak256
    /* "signaltest_parsed.sol":4559:4575  priceReceive_key */
  0x02
    /* "signaltest_parsed.sol":4559:4616  priceReceive_key = keccak256("priceReceive_func(bytes3)") */
  dup2
  swap1
  sstore
  pop
    /* "signaltest_parsed.sol":4713:4734  priceReceive_key_slot */
  0x02
    /* "signaltest_parsed.sol":4707:4735  sload(priceReceive_key_slot) */
  sload
    /* "signaltest_parsed.sol":4700:4705  30000 */
  0x7530
    /* "signaltest_parsed.sol":4696:4698  10 */
  0x0a
    /* "signaltest_parsed.sol":4693:4694  1 */
  0x01
    /* "signaltest_parsed.sol":4682:4736  createslot(1, 10, 30000, sload(priceReceive_key_slot)) */
  createslot
    /* "signaltest_parsed.sol":4656:4680  priceReceive_status_slot */
  0x01
    /* "signaltest_parsed.sol":4649:4737  sstore(priceReceive_status_slot, createslot(1, 10, 30000, sload(priceReceive_key_slot))) */
  sstore
    /* "signaltest_parsed.sol":4635:4747  {... */
  jump	// out
    /* "signaltest_parsed.sol":3871:6949  contract B {... */
tag_6:
  dataSize(sub_0)
  dup1
  dataOffset(sub_0)
  0x00
  codecopy
  0x00
  return
stop

sub_0: assembly {
        /* "signaltest_parsed.sol":3871:6949  contract B {... */
      mstore(0x40, 0x80)
      callvalue
      dup1
      iszero
      tag_1
      jumpi
      0x00
      dup1
      revert
    tag_1:
      pop
      jumpi(tag_2, lt(calldatasize, 0x04))
      shr(0xe0, calldataload(0x00))
      dup1
      0x456a0390
      gt
      tag_10
      jumpi
      dup1
      0x456a0390
      eq
      tag_6
      jumpi
      dup1
      0x68c0b038
      eq
      tag_7
      jumpi
      dup1
      0x781c92b3
      eq
      tag_8
      jumpi
      dup1
      0x81b28b60
      eq
      tag_9
      jumpi
      jump(tag_2)
    tag_10:
      dup1
      0x0f912881
      eq
      tag_3
      jumpi
      dup1
      0x165035e2
      eq
      tag_4
      jumpi
      dup1
      0x238227d9
      eq
      tag_5
      jumpi
    tag_2:
      0x00
      dup1
      revert
        /* "signaltest_parsed.sol":4987:5070  function priceReceive_func(bytes3 obj) public {... */
    tag_3:
      tag_11
      0x04
      dup1
      calldatasize
      sub
      0x20
      dup2
      lt
      iszero
      tag_12
      jumpi
      0x00
      dup1
      revert
    tag_12:
      dup2
      add
      swap1
      dup1
      dup1
      calldataload
      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
      and
      swap1
      0x20
      add
      swap1
      swap3
      swap2
      swap1
      pop
      pop
      pop
      tag_13
      jump	// in
    tag_11:
      stop
        /* "signaltest_parsed.sol":3926:3961  uint public constant ONE_HOUR = 180 */
    tag_4:
      tag_14
      tag_15
      jump	// in
    tag_14:
      mload(0x40)
      dup1
      dup3
      dup2
      mstore
      0x20
      add
      swap2
      pop
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      return
        /* "signaltest_parsed.sol":4315:4420  function get_priceReceive_key() public view returns (bytes32 key) {... */
    tag_5:
      tag_16
      tag_17
      jump	// in
    tag_16:
      mload(0x40)
      dup1
      dup3
      dup2
      mstore
      0x20
      add
      swap2
      pop
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      return
        /* "signaltest_parsed.sol":6824:6903  function getLocalPriceSum() public returns (bytes3){... */
    tag_6:
      tag_18
      tag_19
      jump	// in
    tag_18:
      mload(0x40)
      dup1
      dup3
      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
      and
      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
      and
      dup2
      mstore
      0x20
      add
      swap2
      pop
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      return
        /* "signaltest_parsed.sol":3893:3920  bytes3 public LocalPriceSum */
    tag_7:
      tag_20
      tag_21
      jump	// in
    tag_20:
      mload(0x40)
      dup1
      dup3
      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
      and
      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
      and
      dup2
      mstore
      0x20
      add
      swap2
      pop
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      return
        /* "signaltest_parsed.sol":5073:5981  function bindfunc(address addrA) public {... */
    tag_8:
      tag_22
      0x04
      dup1
      calldatasize
      sub
      0x20
      dup2
      lt
      iszero
      tag_23
      jumpi
      0x00
      dup1
      revert
    tag_23:
      dup2
      add
      swap1
      dup1
      dup1
      calldataload
      0xffffffffffffffffffffffffffffffffffffffff
      and
      swap1
      0x20
      add
      swap1
      swap3
      swap2
      swap1
      pop
      pop
      pop
      tag_24
      jump	// in
    tag_22:
      stop
        /* "signaltest_parsed.sol":5987:6821  function detachfunc() public {... */
    tag_9:
      tag_25
      tag_26
      jump	// in
    tag_25:
      stop
        /* "signaltest_parsed.sol":4987:5070  function priceReceive_func(bytes3 obj) public {... */
    tag_13:
        /* "signaltest_parsed.sol":5060:5063  obj */
      dup1
        /* "signaltest_parsed.sol":5059:5063  ~obj */
      not
        /* "signaltest_parsed.sol":5043:5056  LocalPriceSum */
      0x00
      0x14
        /* "signaltest_parsed.sol":5043:5063  LocalPriceSum = ~obj */
      0x0100
      exp
      dup2
      sload
      dup2
      0xffffff
      mul
      not
      and
      swap1
      dup4
      0xe8
      shr
      mul
      or
      swap1
      sstore
      pop
        /* "signaltest_parsed.sol":4987:5070  function priceReceive_func(bytes3 obj) public {... */
      pop
      jump	// out
        /* "signaltest_parsed.sol":3926:3961  uint public constant ONE_HOUR = 180 */
    tag_15:
        /* "signaltest_parsed.sol":3958:3961  180 */
      0xb4
        /* "signaltest_parsed.sol":3926:3961  uint public constant ONE_HOUR = 180 */
      dup2
      jump	// out
        /* "signaltest_parsed.sol":4315:4420  function get_priceReceive_key() public view returns (bytes32 key) {... */
    tag_17:
        /* "signaltest_parsed.sol":4368:4379  bytes32 key */
      0x00
        /* "signaltest_parsed.sol":4397:4413  priceReceive_key */
      sload(0x02)
        /* "signaltest_parsed.sol":4390:4413  return priceReceive_key */
      swap1
      pop
        /* "signaltest_parsed.sol":4315:4420  function get_priceReceive_key() public view returns (bytes32 key) {... */
      swap1
      jump	// out
        /* "signaltest_parsed.sol":6824:6903  function getLocalPriceSum() public returns (bytes3){... */
    tag_19:
        /* "signaltest_parsed.sol":6868:6874  bytes3 */
      0x00
        /* "signaltest_parsed.sol":6886:6899  LocalPriceSum */
      dup1
      0x14
      swap1
      sload
      swap1
      0x0100
      exp
      swap1
      div
      0xe8
      shl
        /* "signaltest_parsed.sol":6879:6899  return LocalPriceSum */
      swap1
      pop
        /* "signaltest_parsed.sol":6824:6903  function getLocalPriceSum() public returns (bytes3){... */
      swap1
      jump	// out
        /* "signaltest_parsed.sol":3893:3920  bytes3 public LocalPriceSum */
    tag_21:
      0x00
      0x14
      swap1
      sload
      swap1
      0x0100
      exp
      swap1
      div
      0xe8
      shl
      dup2
      jump	// out
        /* "signaltest_parsed.sol":5073:5981  function bindfunc(address addrA) public {... */
    tag_24:
        /* "signaltest_parsed.sol":5125:5130  addrA */
      dup1
        /* "signaltest_parsed.sol":5117:5120  dut */
      0x00
      dup1
        /* "signaltest_parsed.sol":5117:5131  dut = A(addrA) */
      0x0100
      exp
      dup2
      sload
      dup2
      0xffffffffffffffffffffffffffffffffffffffff
      mul
      not
      and
      swap1
      dup4
      0xffffffffffffffffffffffffffffffffffffffff
      and
      mul
      or
      swap1
      sstore
      pop
        /* "signaltest_parsed.sol":5392:5420  address dut_bindslot_address */
      0x00
        /* "signaltest_parsed.sol":5431:5434  dut */
      dup1
      0x00
      swap1
      sload
      swap1
      0x0100
      exp
      swap1
      div
      0xffffffffffffffffffffffffffffffffffffffff
      and
        /* "signaltest_parsed.sol":5392:5435  address dut_bindslot_address = address(dut) */
      swap1
      pop
        /* "signaltest_parsed.sol":5487:5527  bytes32 dut_bindslot_priceFeedUpdate_key */
      0x00
        /* "signaltest_parsed.sol":5530:5560  keccak256("priceFeedUpdate()") */
      mload(0x40)
      dup1
      dup1
      0x7072696365466565645570646174652829000000000000000000000000000000
      dup2
      mstore
      pop
      0x11
      add
      swap1
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      keccak256
        /* "signaltest_parsed.sol":5487:5560  bytes32 dut_bindslot_priceFeedUpdate_key = keccak256("priceFeedUpdate()") */
      swap1
      pop
        /* "signaltest_parsed.sol":5617:5659  bytes32 this_dut_bindslot_priceReceive_key */
      0x00
        /* "signaltest_parsed.sol":5662:5684  get_priceReceive_key() */
      tag_31
        /* "signaltest_parsed.sol":5662:5682  get_priceReceive_key */
      tag_17
        /* "signaltest_parsed.sol":5662:5684  get_priceReceive_key() */
      jump	// in
    tag_31:
        /* "signaltest_parsed.sol":5617:5684  bytes32 this_dut_bindslot_priceReceive_key = get_priceReceive_key() */
      swap1
      pop
        /* "signaltest_parsed.sol":5827:5861  this_dut_bindslot_priceReceive_key */
      dup1
        /* "signaltest_parsed.sol":5793:5825  dut_bindslot_priceFeedUpdate_key */
      dup3
        /* "signaltest_parsed.sol":5771:5791  dut_bindslot_address */
      dup5
        /* "signaltest_parsed.sol":5762:5862  bindslot(dut_bindslot_address, dut_bindslot_priceFeedUpdate_key, this_dut_bindslot_priceReceive_key) */
      bindslot
        /* "signaltest_parsed.sol":5756:5760  0x40 */
      0x40
        /* "signaltest_parsed.sol":5749:5863  mstore(0x40, bindslot(dut_bindslot_address, dut_bindslot_priceFeedUpdate_key, this_dut_bindslot_priceReceive_key)) */
      mstore
        /* "signaltest_parsed.sol":5744:5870  {... */
      pop
      pop
      pop
      pop
      jump	// out
        /* "signaltest_parsed.sol":5987:6821  function detachfunc() public {... */
    tag_26:
        /* "signaltest_parsed.sol":6284:6322  bytes32 dut_detach_priceFeedUpdate_key */
      0x00
        /* "signaltest_parsed.sol":6325:6355  keccak256("priceFeedUpdate()") */
      mload(0x40)
      dup1
      dup1
      0x7072696365466565645570646174652829000000000000000000000000000000
      dup2
      mstore
      pop
      0x11
      add
      swap1
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      keccak256
        /* "signaltest_parsed.sol":6284:6355  bytes32 dut_detach_priceFeedUpdate_key = keccak256("priceFeedUpdate()") */
      swap1
      pop
        /* "signaltest_parsed.sol":6386:6412  address dut_detach_address */
      0x00
        /* "signaltest_parsed.sol":6423:6426  dut */
      dup1
      0x00
      swap1
      sload
      swap1
      0x0100
      exp
      swap1
      div
      0xffffffffffffffffffffffffffffffffffffffff
      and
        /* "signaltest_parsed.sol":6386:6427  address dut_detach_address = address(dut) */
      swap1
      pop
        /* "signaltest_parsed.sol":6464:6506  bytes32 this_dut_bindslot_priceReceive_key */
      0x00
        /* "signaltest_parsed.sol":6509:6531  get_priceReceive_key() */
      tag_33
        /* "signaltest_parsed.sol":6509:6529  get_priceReceive_key */
      tag_17
        /* "signaltest_parsed.sol":6509:6531  get_priceReceive_key() */
      jump	// in
    tag_33:
        /* "signaltest_parsed.sol":6464:6531  bytes32 this_dut_bindslot_priceReceive_key = get_priceReceive_key() */
      swap1
      pop
        /* "signaltest_parsed.sol":6667:6701  this_dut_bindslot_priceReceive_key */
      dup1
        /* "signaltest_parsed.sol":6635:6665  dut_detach_priceFeedUpdate_key */
      dup4
        /* "signaltest_parsed.sol":6615:6633  dut_detach_address */
      dup4
        /* "signaltest_parsed.sol":6604:6702  detachslot(dut_detach_address, dut_detach_priceFeedUpdate_key, this_dut_bindslot_priceReceive_key) */
      detachslot
        /* "signaltest_parsed.sol":6598:6602  0x40 */
      0x40
        /* "signaltest_parsed.sol":6591:6703  mstore(0x40, detachslot(dut_detach_address, dut_detach_priceFeedUpdate_key, this_dut_bindslot_priceReceive_key)) */
      mstore
        /* "signaltest_parsed.sol":6586:6707  {... */
      pop
      pop
      pop
      jump	// out

    auxdata: 0xa26469706673582212206821d3cf0f30fe61b28b5e92e8f4cb1596c934d29a9015c4dfe54dbefdee6a4064736f6c63782c302e362e31312d646576656c6f702e323032302e372e32322b636f6d6d69742e36646666643637632e6d6f64005d
}
