    /* "signaltest_parsed.sol":25:3869  contract A {... */
  mstore(0x40, 0x80)
    /* "signaltest_parsed.sol":3808:3867  constructor() public {... */
  callvalue
  dup1
  iszero
  tag_1
  jumpi
  0x00
  dup1
  revert
tag_1:
  pop
    /* "signaltest_parsed.sol":3834:3851  priceFeedUpdate() */
  tag_4
    /* "signaltest_parsed.sol":3834:3849  priceFeedUpdate */
  shl(0x20, tag_5)
    /* "signaltest_parsed.sol":3834:3851  priceFeedUpdate() */
  0x20
  shr
  jump	// in
tag_4:
    /* "signaltest_parsed.sol":3856:3864  random() */
  tag_6
    /* "signaltest_parsed.sol":3856:3862  random */
  shl(0x20, tag_7)
    /* "signaltest_parsed.sol":3856:3864  random() */
  0x20
  shr
  jump	// in
tag_6:
    /* "signaltest_parsed.sol":25:3869  contract A {... */
  jump(tag_8)
    /* "signaltest_parsed.sol":1300:1575  function priceFeedUpdate() private {... */
tag_5:
    /* "signaltest_parsed.sol":1367:1397  keccak256("priceFeedUpdate()") */
  mload(0x40)
  dup1
  dup1
  0x7072696365466565645570646174652829000000000000000000000000000000
  dup2
  mstore
  pop
  0x11
  add
  swap1
  pop
  mload(0x40)
  dup1
  swap2
  sub
  swap1
  keccak256
    /* "signaltest_parsed.sol":1345:1364  priceFeedUpdate_key */
  0x04
    /* "signaltest_parsed.sol":1345:1397  priceFeedUpdate_key = keccak256("priceFeedUpdate()") */
  dup2
  swap1
  sstore
  pop
    /* "signaltest_parsed.sol":1470:1494  priceFeedUpdate_key_slot */
  0x04
    /* "signaltest_parsed.sol":1464:1495  sload(priceFeedUpdate_key_slot) */
  sload
    /* "signaltest_parsed.sol":1461:1462  0 */
  0x00
    /* "signaltest_parsed.sol":1451:1496  createsig(0, sload(priceFeedUpdate_key_slot)) */
  createsig
    /* "signaltest_parsed.sol":1422:1449  priceFeedUpdate_status_slot */
  0x03
    /* "signaltest_parsed.sol":1415:1497  sstore(priceFeedUpdate_status_slot, createsig(0, sload(priceFeedUpdate_key_slot))) */
  sstore
    /* "signaltest_parsed.sol":1539:1564  priceFeedUpdate_data_slot */
  0x01
    /* "signaltest_parsed.sol":1508:1537  priceFeedUpdate_dataslot_slot */
  0x02
    /* "signaltest_parsed.sol":1501:1565  sstore(priceFeedUpdate_dataslot_slot, priceFeedUpdate_data_slot) */
  sstore
    /* "signaltest_parsed.sol":1410:1569  {... */
  jump	// out
    /* "signaltest_parsed.sol":2454:2653  function random() private {... */
tag_7:
    /* "signaltest_parsed.sol":2503:2524  keccak256("random()") */
  mload(0x40)
  dup1
  dup1
  0x72616e646f6d2829000000000000000000000000000000000000000000000000
  dup2
  mstore
  pop
  0x08
  add
  swap1
  pop
  mload(0x40)
  dup1
  swap2
  sub
  swap1
  keccak256
    /* "signaltest_parsed.sol":2490:2500  random_key */
  0x07
    /* "signaltest_parsed.sol":2490:2524  random_key = keccak256("random()") */
  dup2
  swap1
  sstore
  pop
    /* "signaltest_parsed.sol":2588:2603  random_key_slot */
  0x07
    /* "signaltest_parsed.sol":2582:2604  sload(random_key_slot) */
  sload
    /* "signaltest_parsed.sol":2579:2580  0 */
  0x00
    /* "signaltest_parsed.sol":2569:2605  createsig(0, sload(random_key_slot)) */
  createsig
    /* "signaltest_parsed.sol":2549:2567  random_status_slot */
  0x06
    /* "signaltest_parsed.sol":2542:2606  sstore(random_status_slot, createsig(0, sload(random_key_slot))) */
  sstore
    /* "signaltest_parsed.sol":2639:2642  0x0 */
  0x00
    /* "signaltest_parsed.sol":2617:2637  random_dataslot_slot */
  0x05
    /* "signaltest_parsed.sol":2610:2643  sstore(random_dataslot_slot, 0x0) */
  sstore
    /* "signaltest_parsed.sol":2537:2647  {... */
  jump	// out
    /* "signaltest_parsed.sol":25:3869  contract A {... */
tag_8:
  dataSize(sub_0)
  dup1
  dataOffset(sub_0)
  0x00
  codecopy
  0x00
  return
stop

sub_0: assembly {
        /* "signaltest_parsed.sol":25:3869  contract A {... */
      mstore(0x40, 0x80)
      callvalue
      dup1
      iszero
      tag_1
      jumpi
      0x00
      dup1
      revert
    tag_1:
      pop
      jumpi(tag_2, lt(calldatasize, 0x04))
      shr(0xe0, calldataload(0x00))
      dup1
      0x165035e2
      eq
      tag_3
      jumpi
      dup1
      0x3e4fe9a4
      eq
      tag_4
      jumpi
      dup1
      0xa5621a66
      eq
      tag_5
      jumpi
      dup1
      0xbab3affe
      eq
      tag_6
      jumpi
      dup1
      0xc7a89cec
      eq
      tag_7
      jumpi
      dup1
      0xfd5e127c
      eq
      tag_8
      jumpi
    tag_2:
      0x00
      dup1
      revert
        /* "signaltest_parsed.sol":54:89  uint public constant ONE_HOUR = 180 */
    tag_3:
      tag_9
      tag_10
      jump	// in
    tag_9:
      mload(0x40)
      dup1
      dup3
      dup2
      mstore
      0x20
      add
      swap2
      pop
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      return
        /* "signaltest_parsed.sol":749:841  function get_priceFeedUpdate_argc() public pure returns (uint argc) {... */
    tag_4:
      tag_11
      tag_12
      jump	// in
    tag_11:
      mload(0x40)
      dup1
      dup3
      dup2
      mstore
      0x20
      add
      swap2
      pop
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      return
        /* "signaltest_parsed.sol":2763:3807  function emitfunc(bytes memory DataSent) public {... */
    tag_5:
      tag_13
      0x04
      dup1
      calldatasize
      sub
      0x20
      dup2
      lt
      iszero
      tag_14
      jumpi
      0x00
      dup1
      revert
    tag_14:
      dup2
      add
      swap1
      dup1
      dup1
      calldataload
      swap1
      0x20
      add
      swap1
      0x0100000000
      dup2
      gt
      iszero
      tag_15
      jumpi
      0x00
      dup1
      revert
    tag_15:
      dup3
      add
      dup4
      0x20
      dup3
      add
      gt
      iszero
      tag_16
      jumpi
      0x00
      dup1
      revert
    tag_16:
      dup1
      calldataload
      swap1
      0x20
      add
      swap2
      dup5
      0x01
      dup4
      mul
      dup5
      add
      gt
      0x0100000000
      dup4
      gt
      or
      iszero
      tag_17
      jumpi
      0x00
      dup1
      revert
    tag_17:
      swap2
      swap1
      dup1
      dup1
      0x1f
      add
      0x20
      dup1
      swap2
      div
      mul
      0x20
      add
      mload(0x40)
      swap1
      dup2
      add
      0x40
      mstore
      dup1
      swap4
      swap3
      swap2
      swap1
      dup2
      dup2
      mstore
      0x20
      add
      dup4
      dup4
      dup1
      dup3
      dup5
      calldatacopy
      0x00
      dup2
      dup5
      add
      mstore
      not(0x1f)
      0x1f
      dup3
      add
      and
      swap1
      pop
      dup1
      dup4
      add
      swap3
      pop
      pop
      pop
      pop
      pop
      pop
      pop
      swap2
      swap3
      swap2
      swap3
      swap1
      pop
      pop
      pop
      tag_18
      jump	// in
    tag_13:
      stop
        /* "signaltest_parsed.sol":870:981  function get_priceFeedUpdate_key() public view returns (bytes32 key) {... */
    tag_6:
      tag_19
      tag_20
      jump	// in
    tag_19:
      mload(0x40)
      dup1
      dup3
      dup2
      mstore
      0x20
      add
      swap2
      pop
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      return
        /* "signaltest_parsed.sol":2068:2161  function get_random_key() public view returns (bytes32 key) {... */
    tag_7:
      tag_21
      tag_22
      jump	// in
    tag_21:
      mload(0x40)
      dup1
      dup3
      dup2
      mstore
      0x20
      add
      swap2
      pop
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      return
        /* "signaltest_parsed.sol":1012:1138  function get_priceFeedUpdate_dataslot() public view returns (bytes32 dataslot) {... */
    tag_8:
      tag_23
      tag_24
      jump	// in
    tag_23:
      mload(0x40)
      dup1
      dup3
      dup2
      mstore
      0x20
      add
      swap2
      pop
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      return
        /* "signaltest_parsed.sol":54:89  uint public constant ONE_HOUR = 180 */
    tag_10:
        /* "signaltest_parsed.sol":86:89  180 */
      0xb4
        /* "signaltest_parsed.sol":54:89  uint public constant ONE_HOUR = 180 */
      dup2
      jump	// out
        /* "signaltest_parsed.sol":749:841  function get_priceFeedUpdate_argc() public pure returns (uint argc) {... */
    tag_12:
        /* "signaltest_parsed.sol":806:815  uint argc */
      0x00
        /* "signaltest_parsed.sol":833:834  0 */
      dup1
        /* "signaltest_parsed.sol":826:834  return 0 */
      swap1
      pop
        /* "signaltest_parsed.sol":749:841  function get_priceFeedUpdate_argc() public pure returns (uint argc) {... */
      swap1
      jump	// out
        /* "signaltest_parsed.sol":2763:3807  function emitfunc(bytes memory DataSent) public {... */
    tag_18:
        /* "signaltest_parsed.sol":3104:3138  set_priceFeedUpdate_data(DataSent) */
      tag_27
        /* "signaltest_parsed.sol":3129:3137  DataSent */
      dup2
        /* "signaltest_parsed.sol":3104:3128  set_priceFeedUpdate_data */
      tag_28
        /* "signaltest_parsed.sol":3104:3138  set_priceFeedUpdate_data(DataSent) */
      jump	// in
    tag_27:
        /* "signaltest_parsed.sol":3182:3220  uint this_emitsig_priceFeedUpdate_argc */
      0x00
        /* "signaltest_parsed.sol":3223:3249  get_priceFeedUpdate_argc() */
      tag_29
        /* "signaltest_parsed.sol":3223:3247  get_priceFeedUpdate_argc */
      tag_12
        /* "signaltest_parsed.sol":3223:3249  get_priceFeedUpdate_argc() */
      jump	// in
    tag_29:
        /* "signaltest_parsed.sol":3182:3249  uint this_emitsig_priceFeedUpdate_argc = get_priceFeedUpdate_argc() */
      swap1
      pop
        /* "signaltest_parsed.sol":3282:3327  bytes32 this_emitsig_priceFeedUpdate_dataslot */
      0x00
        /* "signaltest_parsed.sol":3330:3360  get_priceFeedUpdate_dataslot() */
      tag_30
        /* "signaltest_parsed.sol":3330:3358  get_priceFeedUpdate_dataslot */
      tag_24
        /* "signaltest_parsed.sol":3330:3360  get_priceFeedUpdate_dataslot() */
      jump	// in
    tag_30:
        /* "signaltest_parsed.sol":3282:3360  bytes32 this_emitsig_priceFeedUpdate_dataslot = get_priceFeedUpdate_dataslot() */
      swap1
      pop
        /* "signaltest_parsed.sol":3394:3434  bytes32 this_emitsig_priceFeedUpdate_key */
      0x00
        /* "signaltest_parsed.sol":3437:3462  get_priceFeedUpdate_key() */
      tag_31
        /* "signaltest_parsed.sol":3437:3460  get_priceFeedUpdate_key */
      tag_20
        /* "signaltest_parsed.sol":3437:3462  get_priceFeedUpdate_key() */
      jump	// in
    tag_31:
        /* "signaltest_parsed.sol":3394:3462  bytes32 this_emitsig_priceFeedUpdate_key = get_priceFeedUpdate_key() */
      swap1
      pop
        /* "signaltest_parsed.sol":3651:3684  this_emitsig_priceFeedUpdate_argc */
      dup3
        /* "signaltest_parsed.sol":3612:3649  this_emitsig_priceFeedUpdate_dataslot */
      dup3
        /* "signaltest_parsed.sol":3609:3610  0 */
      0x00
        /* "signaltest_parsed.sol":3575:3607  this_emitsig_priceFeedUpdate_key */
      dup4
        /* "signaltest_parsed.sol":3567:3685  emitsig(this_emitsig_priceFeedUpdate_key, 0, this_emitsig_priceFeedUpdate_dataslot, this_emitsig_priceFeedUpdate_argc) */
      emitsig
        /* "signaltest_parsed.sol":3561:3565  0x40 */
      0x40
        /* "signaltest_parsed.sol":3554:3686  mstore(0x40, emitsig(this_emitsig_priceFeedUpdate_key, 0, this_emitsig_priceFeedUpdate_dataslot, this_emitsig_priceFeedUpdate_argc)) */
      mstore
        /* "signaltest_parsed.sol":3549:3693  {... */
      pop
      pop
      pop
      pop
      jump	// out
        /* "signaltest_parsed.sol":870:981  function get_priceFeedUpdate_key() public view returns (bytes32 key) {... */
    tag_20:
        /* "signaltest_parsed.sol":926:937  bytes32 key */
      0x00
        /* "signaltest_parsed.sol":955:974  priceFeedUpdate_key */
      sload(0x04)
        /* "signaltest_parsed.sol":948:974  return priceFeedUpdate_key */
      swap1
      pop
        /* "signaltest_parsed.sol":870:981  function get_priceFeedUpdate_key() public view returns (bytes32 key) {... */
      swap1
      jump	// out
        /* "signaltest_parsed.sol":2068:2161  function get_random_key() public view returns (bytes32 key) {... */
    tag_22:
        /* "signaltest_parsed.sol":2115:2126  bytes32 key */
      0x00
        /* "signaltest_parsed.sol":2144:2154  random_key */
      sload(0x07)
        /* "signaltest_parsed.sol":2137:2154  return random_key */
      swap1
      pop
        /* "signaltest_parsed.sol":2068:2161  function get_random_key() public view returns (bytes32 key) {... */
      swap1
      jump	// out
        /* "signaltest_parsed.sol":1012:1138  function get_priceFeedUpdate_dataslot() public view returns (bytes32 dataslot) {... */
    tag_24:
        /* "signaltest_parsed.sol":1073:1089  bytes32 dataslot */
      0x00
        /* "signaltest_parsed.sol":1107:1131  priceFeedUpdate_dataslot */
      sload(0x02)
        /* "signaltest_parsed.sol":1100:1131  return priceFeedUpdate_dataslot */
      swap1
      pop
        /* "signaltest_parsed.sol":1012:1138  function get_priceFeedUpdate_dataslot() public view returns (bytes32 dataslot) {... */
      swap1
      jump	// out
        /* "signaltest_parsed.sol":606:716  function set_priceFeedUpdate_data(bytes memory dataSet) private {... */
    tag_28:
        /* "signaltest_parsed.sol":702:709  dataSet */
      dup1
        /* "signaltest_parsed.sol":679:699  priceFeedUpdate_data */
      0x01
        /* "signaltest_parsed.sol":679:709  priceFeedUpdate_data = dataSet */
      swap1
      dup1
      mload
      swap1
      0x20
      add
      swap1
      tag_36
      swap3
      swap2
      swap1
      tag_37
      jump	// in
    tag_36:
      pop
        /* "signaltest_parsed.sol":606:716  function set_priceFeedUpdate_data(bytes memory dataSet) private {... */
      pop
      jump	// out
    tag_37:
      dup3
      dup1
      sload
      0x01
      dup2
      0x01
      and
      iszero
      0x0100
      mul
      sub
      and
      0x02
      swap1
      div
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
      0x1f
      add
      0x20
      swap1
      div
      dup2
      add
      swap3
      dup3
      0x1f
      lt
      tag_39
      jumpi
      dup1
      mload
      not(0xff)
      and
      dup4
      dup1
      add
      or
      dup6
      sstore
      jump(tag_38)
    tag_39:
      dup3
      dup1
      add
      0x01
      add
      dup6
      sstore
      dup3
      iszero
      tag_38
      jumpi
      swap2
      dup3
      add
    tag_40:
      dup3
      dup2
      gt
      iszero
      tag_41
      jumpi
      dup3
      mload
      dup3
      sstore
      swap2
      0x20
      add
      swap2
      swap1
      0x01
      add
      swap1
      jump(tag_40)
    tag_41:
    tag_38:
      pop
      swap1
      pop
      tag_42
      swap2
      swap1
      tag_43
      jump	// in
    tag_42:
      pop
      swap1
      jump	// out
    tag_43:
      tag_44
      swap2
      swap1
    tag_45:
      dup1
      dup3
      gt
      iszero
      tag_46
      jumpi
      0x00
      dup2
      0x00
      swap1
      sstore
      pop
      0x01
      add
      jump(tag_45)
    tag_46:
      pop
      swap1
      jump
    tag_44:
      swap1
      jump	// out

    auxdata: 0xa2646970667358221220225d1538e84eeaaff4abca15a355249e0e3a76c6120694c1a872242150b4f4c464736f6c63782c302e362e31312d646576656c6f702e323032302e372e32322b636f6d6d69742e36646666643637632e6d6f64005d
}
