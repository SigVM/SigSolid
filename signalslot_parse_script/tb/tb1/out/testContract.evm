    /* "testContract_afterparse.sol":558:2043  contract testContract {... */
  mstore(0x40, 0x80)
    /* "testContract_afterparse.sol":2001:2041  constructor() public {... */
  callvalue
  dup1
  iszero
  tag_1
  jumpi
  0x00
  dup1
  revert
tag_1:
  pop
    /* "testContract_afterparse.sol":2026:2037  what_ever() */
  tag_4
    /* "testContract_afterparse.sol":2026:2035  what_ever */
  shl(0x20, tag_5)
    /* "testContract_afterparse.sol":2026:2037  what_ever() */
  0x20
  shr
  jump	// in
tag_4:
    /* "testContract_afterparse.sol":558:2043  contract testContract {... */
  jump(tag_6)
    /* "testContract_afterparse.sol":745:1001  function what_ever() public{... */
tag_5:
    /* "testContract_afterparse.sol":802:839  keccak256("what_ever_func(uint obj)") */
  mload(0x40)
  dup1
  dup1
  0x776861745f657665725f66756e632875696e74206f626a290000000000000000
  dup2
  mstore
  pop
  0x18
  add
  swap1
  pop
  mload(0x40)
  dup1
  swap2
  sub
  swap1
  keccak256
    /* "testContract_afterparse.sol":840:841  0 */
  0x00
    /* "testContract_afterparse.sol":802:842  keccak256("what_ever_func(uint obj)")[0] */
  0x20
  dup2
  lt
  tag_8
  jumpi
  invalid
tag_8:
  byte
  0xf8
  shl
    /* "testContract_afterparse.sol":782:842  what_ever_codePtr = keccak256("what_ever_func(uint obj)")[0] */
  not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
  and
    /* "testContract_afterparse.sol":782:799  what_ever_codePtr */
  0x03
  0x00
    /* "testContract_afterparse.sol":782:842  what_ever_codePtr = keccak256("what_ever_func(uint obj)")[0] */
  0x0100
  exp
  dup2
  sload
  dup2
  0xffffffff
  mul
  not
  and
  swap1
  dup4
  0xe0
  shr
  mul
  or
  swap1
  sstore
  pop
    /* "testContract_afterparse.sol":958:980  what_ever_codePtr_slot */
  0x03
    /* "testContract_afterparse.sol":952:981  sload(what_ever_codePtr_slot) */
  sload
    /* "testContract_afterparse.sol":950:951  2 */
  0x02
    /* "testContract_afterparse.sol":948:949  1 */
  0x01
    /* "testContract_afterparse.sol":924:946  what_ever_codePtr_slot */
  0x03
    /* "testContract_afterparse.sol":918:947  sload(what_ever_codePtr_slot) */
  sload
    /* "testContract_afterparse.sol":915:917  32 */
  0x20
    /* "testContract_afterparse.sol":904:982  createslot(32,sload(what_ever_codePtr_slot),1,2,sload(what_ever_codePtr_slot)) */
  createslot
    /* "testContract_afterparse.sol":882:903  what_ever_slotId_slot */
  0x02
    /* "testContract_afterparse.sol":875:983  sstore(what_ever_slotId_slot,createslot(32,sload(what_ever_codePtr_slot),1,2,sload(what_ever_codePtr_slot))) */
  sstore
    /* "testContract_afterparse.sol":861:993  {... */
  jump	// out
    /* "testContract_afterparse.sol":558:2043  contract testContract {... */
tag_6:
  dataSize(sub_0)
  dup1
  dataOffset(sub_0)
  0x00
  codecopy
  0x00
  return
stop

sub_0: assembly {
        /* "testContract_afterparse.sol":558:2043  contract testContract {... */
      mstore(0x40, 0x80)
      callvalue
      dup1
      iszero
      tag_1
      jumpi
      0x00
      dup1
      revert
    tag_1:
      pop
      jumpi(tag_2, lt(calldatasize, 0x04))
      shr(0xe0, calldataload(0x00))
      dup1
      0x81b28b60
      gt
      tag_11
      jumpi
      dup1
      0x81b28b60
      eq
      tag_7
      jumpi
      dup1
      0xa0a25d6b
      eq
      tag_8
      jumpi
      dup1
      0xc8c2d18e
      eq
      tag_9
      jumpi
      dup1
      0xe0279d08
      eq
      tag_10
      jumpi
      jump(tag_2)
    tag_11:
      dup1
      0x165035e2
      eq
      tag_3
      jumpi
      dup1
      0x395f9b8d
      eq
      tag_4
      jumpi
      dup1
      0x3b51f2b5
      eq
      tag_5
      jumpi
      dup1
      0x434d081c
      eq
      tag_6
      jumpi
    tag_2:
      0x00
      dup1
      revert
        /* "testContract_afterparse.sol":622:657  uint public constant ONE_HOUR = 180 */
    tag_3:
      tag_12
      tag_13
      jump	// in
    tag_12:
      mload(0x40)
      dup1
      dup3
      dup2
      mstore
      0x20
      add
      swap2
      pop
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      return
        /* "testContract_afterparse.sol":1170:1407  function bindfunc() public view{... */
    tag_4:
      tag_14
      tag_15
      jump	// in
    tag_14:
      stop
        /* "testContract_afterparse.sol":1006:1168  function what_ever_func(uint obj) public{... */
    tag_5:
      tag_16
      0x04
      dup1
      calldatasize
      sub
      0x20
      dup2
      lt
      iszero
      tag_17
      jumpi
      0x00
      dup1
      revert
    tag_17:
      dup2
      add
      swap1
      dup1
      dup1
      calldataload
      swap1
      0x20
      add
      swap1
      swap3
      swap2
      swap1
      pop
      pop
      pop
      tag_18
      jump	// in
    tag_16:
      stop
        /* "testContract_afterparse.sol":674:702  uint public what_ever_slotId */
    tag_6:
      tag_19
      tag_20
      jump	// in
    tag_19:
      mload(0x40)
      dup1
      dup3
      dup2
      mstore
      0x20
      add
      swap2
      pop
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      return
        /* "testContract_afterparse.sol":1759:1999  function detachfunc() public view{... */
    tag_7:
      tag_21
      tag_22
      jump	// in
    tag_21:
      stop
        /* "testContract_afterparse.sol":1412:1754  function emitfunc() public view{... */
    tag_8:
      tag_23
      tag_24
      jump	// in
    tag_23:
      stop
        /* "testContract_afterparse.sol":745:1001  function what_ever() public{... */
    tag_9:
      tag_25
      tag_26
      jump	// in
    tag_25:
      stop
        /* "testContract_afterparse.sol":708:739  bytes4 public what_ever_codePtr */
    tag_10:
      tag_27
      tag_28
      jump	// in
    tag_27:
      mload(0x40)
      dup1
      dup3
      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
      and
      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
      and
      dup2
      mstore
      0x20
      add
      swap2
      pop
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      return
        /* "testContract_afterparse.sol":622:657  uint public constant ONE_HOUR = 180 */
    tag_13:
        /* "testContract_afterparse.sol":654:657  180 */
      0xb4
        /* "testContract_afterparse.sol":622:657  uint public constant ONE_HOUR = 180 */
      dup2
      jump	// out
        /* "testContract_afterparse.sol":1170:1407  function bindfunc() public view{... */
    tag_15:
        /* "testContract_afterparse.sol":1205:1224  address dut_address */
      0x00
        /* "testContract_afterparse.sol":1235:1238  dut */
      dup1
      0x00
      swap1
      sload
      swap1
      0x0100
      exp
      swap1
      div
      0xffffffffffffffffffffffffffffffffffffffff
      and
        /* "testContract_afterparse.sol":1205:1239  address dut_address = address(dut) */
      swap1
      pop
        /* "testContract_afterparse.sol":1243:1273  uint dut_PriceFeedUpdate_sigId */
      0x00
        /* "testContract_afterparse.sol":1276:1279  dut */
      dup1
      0x00
      swap1
      sload
      swap1
      0x0100
      exp
      swap1
      div
      0xffffffffffffffffffffffffffffffffffffffff
      and
        /* "testContract_afterparse.sol":1276:1301  dut.PriceFeedUpdate_sigId */
      0xffffffffffffffffffffffffffffffffffffffff
      and
      0x25e29249
        /* "testContract_afterparse.sol":1276:1303  dut.PriceFeedUpdate_sigId() */
      mload(0x40)
      dup2
      0xffffffff
      and
      0xe0
      shl
      dup2
      mstore
      0x04
      add
      0x20
      mload(0x40)
      dup1
      dup4
      sub
      dup2
      dup7
      dup1
      extcodesize
      iszero
      dup1
      iszero
      tag_30
      jumpi
      0x00
      dup1
      revert
    tag_30:
      pop
      gas
      staticcall
      iszero
      dup1
      iszero
      tag_32
      jumpi
      returndatasize
      0x00
      dup1
      returndatacopy
      revert(0x00, returndatasize)
    tag_32:
      pop
      pop
      pop
      pop
      mload(0x40)
      returndatasize
      0x20
      dup2
      lt
      iszero
      tag_33
      jumpi
      0x00
      dup1
      revert
    tag_33:
      dup2
      add
      swap1
      dup1
      dup1
      mload
      swap1
      0x20
      add
      swap1
      swap3
      swap2
      swap1
      pop
      pop
      pop
        /* "testContract_afterparse.sol":1243:1303  uint dut_PriceFeedUpdate_sigId = dut.PriceFeedUpdate_sigId() */
      swap1
      pop
        /* "testContract_afterparse.sol":1373:1394  what_ever_slotId_slot */
      0x02
        /* "testContract_afterparse.sol":1367:1395  sload(what_ever_slotId_slot) */
      sload
        /* "testContract_afterparse.sol":1341:1366  dut_PriceFeedUpdate_sigId */
      dup2
        /* "testContract_afterparse.sol":1329:1340  dut_address */
      dup4
        /* "testContract_afterparse.sol":1321:1396  bindsig(dut_address,dut_PriceFeedUpdate_sigId,sload(what_ever_slotId_slot)) */
      bindsig
        /* "testContract_afterparse.sol":1316:1403  {... */
      pop
      pop
      jump	// out
        /* "testContract_afterparse.sol":1006:1168  function what_ever_func(uint obj) public{... */
    tag_18:
        /* "testContract_afterparse.sol":1070:1073  obj */
      dup1
        /* "testContract_afterparse.sol":1058:1067  price_xyz */
      0x01
        /* "testContract_afterparse.sol":1058:1073  price_xyz = obj */
      dup2
      swap1
      sstore
      pop
        /* "testContract_afterparse.sol":1099:1102  obj */
      dup1
        /* "testContract_afterparse.sol":1087:1096  price_xyz */
      0x01
        /* "testContract_afterparse.sol":1087:1102  price_xyz = obj */
      dup2
      swap1
      sstore
      pop
        /* "testContract_afterparse.sol":1128:1131  obj */
      dup1
        /* "testContract_afterparse.sol":1116:1125  price_xyz */
      0x01
        /* "testContract_afterparse.sol":1116:1131  price_xyz = obj */
      dup2
      swap1
      sstore
      pop
        /* "testContract_afterparse.sol":1157:1160  obj */
      dup1
        /* "testContract_afterparse.sol":1145:1154  price_xyz */
      0x01
        /* "testContract_afterparse.sol":1145:1160  price_xyz = obj */
      dup2
      swap1
      sstore
      pop
        /* "testContract_afterparse.sol":1006:1168  function what_ever_func(uint obj) public{... */
      pop
      jump	// out
        /* "testContract_afterparse.sol":674:702  uint public what_ever_slotId */
    tag_20:
      sload(0x02)
      dup2
      jump	// out
        /* "testContract_afterparse.sol":1759:1999  function detachfunc() public view{... */
    tag_22:
        /* "testContract_afterparse.sol":1796:1826  uint dut_PriceFeedUpdate_sigId */
      0x00
        /* "testContract_afterparse.sol":1829:1832  dut */
      dup1
      0x00
      swap1
      sload
      swap1
      0x0100
      exp
      swap1
      div
      0xffffffffffffffffffffffffffffffffffffffff
      and
        /* "testContract_afterparse.sol":1829:1854  dut.PriceFeedUpdate_sigId */
      0xffffffffffffffffffffffffffffffffffffffff
      and
      0x25e29249
        /* "testContract_afterparse.sol":1829:1856  dut.PriceFeedUpdate_sigId() */
      mload(0x40)
      dup2
      0xffffffff
      and
      0xe0
      shl
      dup2
      mstore
      0x04
      add
      0x20
      mload(0x40)
      dup1
      dup4
      sub
      dup2
      dup7
      dup1
      extcodesize
      iszero
      dup1
      iszero
      tag_36
      jumpi
      0x00
      dup1
      revert
    tag_36:
      pop
      gas
      staticcall
      iszero
      dup1
      iszero
      tag_38
      jumpi
      returndatasize
      0x00
      dup1
      returndatacopy
      revert(0x00, returndatasize)
    tag_38:
      pop
      pop
      pop
      pop
      mload(0x40)
      returndatasize
      0x20
      dup2
      lt
      iszero
      tag_39
      jumpi
      0x00
      dup1
      revert
    tag_39:
      dup2
      add
      swap1
      dup1
      dup1
      mload
      swap1
      0x20
      add
      swap1
      swap3
      swap2
      swap1
      pop
      pop
      pop
        /* "testContract_afterparse.sol":1796:1856  uint dut_PriceFeedUpdate_sigId = dut.PriceFeedUpdate_sigId() */
      swap1
      pop
        /* "testContract_afterparse.sol":1860:1879  address dut_address */
      0x00
        /* "testContract_afterparse.sol":1890:1893  dut */
      dup1
      0x00
      swap1
      sload
      swap1
      0x0100
      exp
      swap1
      div
      0xffffffffffffffffffffffffffffffffffffffff
      and
        /* "testContract_afterparse.sol":1860:1894  address dut_address = address(dut) */
      swap1
      pop
        /* "testContract_afterparse.sol":1965:1986  what_ever_slotId_slot */
      0x02
        /* "testContract_afterparse.sol":1959:1987  sload(what_ever_slotId_slot) */
      sload
        /* "testContract_afterparse.sol":1933:1958  dut_PriceFeedUpdate_sigId */
      dup3
        /* "testContract_afterparse.sol":1921:1932  dut_address */
      dup3
        /* "testContract_afterparse.sol":1911:1988  detachsig(dut_address,dut_PriceFeedUpdate_sigId,sload(what_ever_slotId_slot)) */
      detachsig
        /* "testContract_afterparse.sol":1906:1992  {... */
      pop
      pop
      jump	// out
        /* "testContract_afterparse.sol":1412:1754  function emitfunc() public view{... */
    tag_24:
        /* "testContract_afterparse.sol":1447:1488  bytes memory dut_PriceFeedUpdate_dataslot */
      0x60
        /* "testContract_afterparse.sol":1491:1494  dut */
      0x00
      dup1
      swap1
      sload
      swap1
      0x0100
      exp
      swap1
      div
      0xffffffffffffffffffffffffffffffffffffffff
      and
        /* "testContract_afterparse.sol":1491:1519  dut.PriceFeedUpdate_dataslot */
      0xffffffffffffffffffffffffffffffffffffffff
      and
      0xf6310288
        /* "testContract_afterparse.sol":1491:1521  dut.PriceFeedUpdate_dataslot() */
      mload(0x40)
      dup2
      0xffffffff
      and
      0xe0
      shl
      dup2
      mstore
      0x04
      add
      0x00
      mload(0x40)
      dup1
      dup4
      sub
      dup2
      dup7
      dup1
      extcodesize
      iszero
      dup1
      iszero
      tag_41
      jumpi
      0x00
      dup1
      revert
    tag_41:
      pop
      gas
      staticcall
      iszero
      dup1
      iszero
      tag_43
      jumpi
      returndatasize
      0x00
      dup1
      returndatacopy
      revert(0x00, returndatasize)
    tag_43:
      pop
      pop
      pop
      pop
      mload(0x40)
      returndatasize
      0x00
      dup3
      returndatacopy
      returndatasize
      not(0x1f)
      0x1f
      dup3
      add
      and
      dup3
      add
      dup1
      0x40
      mstore
      pop
      0x20
      dup2
      lt
      iszero
      tag_44
      jumpi
      0x00
      dup1
      revert
    tag_44:
      dup2
      add
      swap1
      dup1
      dup1
      mload
      mload(0x40)
      swap4
      swap3
      swap2
      swap1
      dup5
      0x0100000000
      dup3
      gt
      iszero
      tag_45
      jumpi
      0x00
      dup1
      revert
    tag_45:
      dup4
      dup3
      add
      swap2
      pop
      0x20
      dup3
      add
      dup6
      dup2
      gt
      iszero
      tag_46
      jumpi
      0x00
      dup1
      revert
    tag_46:
      dup3
      mload
      dup7
      0x01
      dup3
      mul
      dup4
      add
      gt
      0x0100000000
      dup3
      gt
      or
      iszero
      tag_47
      jumpi
      0x00
      dup1
      revert
    tag_47:
      dup1
      dup4
      mstore
      0x20
      dup4
      add
      swap3
      pop
      pop
      pop
      swap1
      dup1
      mload
      swap1
      0x20
      add
      swap1
      dup1
      dup4
      dup4
      0x00
    tag_48:
      dup4
      dup2
      lt
      iszero
      tag_50
      jumpi
      dup1
      dup3
      add
      mload
      dup2
      dup5
      add
      mstore
      0x20
      dup2
      add
      swap1
      pop
      jump(tag_48)
    tag_50:
      pop
      pop
      pop
      pop
      swap1
      pop
      swap1
      dup2
      add
      swap1
      0x1f
      and
      dup1
      iszero
      tag_51
      jumpi
      dup1
      dup3
      sub
      dup1
      mload
      0x01
      dup4
      0x20
      sub
      0x0100
      exp
      sub
      not
      and
      dup2
      mstore
      0x20
      add
      swap2
      pop
    tag_51:
      pop
      0x40
      mstore
      pop
      pop
      pop
        /* "testContract_afterparse.sol":1447:1521  bytes memory dut_PriceFeedUpdate_dataslot = dut.PriceFeedUpdate_dataslot() */
      swap1
      pop
        /* "testContract_afterparse.sol":1525:1555  uint dut_PriceFeedUpdate_sigId */
      0x00
        /* "testContract_afterparse.sol":1558:1561  dut */
      dup1
      0x00
      swap1
      sload
      swap1
      0x0100
      exp
      swap1
      div
      0xffffffffffffffffffffffffffffffffffffffff
      and
        /* "testContract_afterparse.sol":1558:1583  dut.PriceFeedUpdate_sigId */
      0xffffffffffffffffffffffffffffffffffffffff
      and
      0x25e29249
        /* "testContract_afterparse.sol":1558:1585  dut.PriceFeedUpdate_sigId() */
      mload(0x40)
      dup2
      0xffffffff
      and
      0xe0
      shl
      dup2
      mstore
      0x04
      add
      0x20
      mload(0x40)
      dup1
      dup4
      sub
      dup2
      dup7
      dup1
      extcodesize
      iszero
      dup1
      iszero
      tag_52
      jumpi
      0x00
      dup1
      revert
    tag_52:
      pop
      gas
      staticcall
      iszero
      dup1
      iszero
      tag_54
      jumpi
      returndatasize
      0x00
      dup1
      returndatacopy
      revert(0x00, returndatasize)
    tag_54:
      pop
      pop
      pop
      pop
      mload(0x40)
      returndatasize
      0x20
      dup2
      lt
      iszero
      tag_55
      jumpi
      0x00
      dup1
      revert
    tag_55:
      dup2
      add
      swap1
      dup1
      dup1
      mload
      swap1
      0x20
      add
      swap1
      swap3
      swap2
      swap1
      pop
      pop
      pop
        /* "testContract_afterparse.sol":1525:1585  uint dut_PriceFeedUpdate_sigId = dut.PriceFeedUpdate_sigId() */
      swap1
      pop
        /* "testContract_afterparse.sol":1645:1659  price_xyz_slot */
      0x01
        /* "testContract_afterparse.sol":1639:1660  mload(price_xyz_slot) */
      mload
        /* "testContract_afterparse.sol":1610:1638  dut_PriceFeedUpdate_dataslot */
      dup3
        /* "testContract_afterparse.sol":1603:1661  mstore(dut_PriceFeedUpdate_dataslot,mload(price_xyz_slot)) */
      mstore
        /* "testContract_afterparse.sol":1737:1739  32 */
      0x20
        /* "testContract_afterparse.sol":1708:1736  dut_PriceFeedUpdate_dataslot */
      dup3
        /* "testContract_afterparse.sol":1699:1707  ONE_HOUR */
      0xb4
        /* "testContract_afterparse.sol":1673:1698  dut_PriceFeedUpdate_sigId */
      dup4
        /* "testContract_afterparse.sol":1665:1740  emitsig(dut_PriceFeedUpdate_sigId,ONE_HOUR,dut_PriceFeedUpdate_dataslot,32) */
      emitsig
        /* "testContract_afterparse.sol":1598:1747  {... */
      pop
      pop
      jump	// out
        /* "testContract_afterparse.sol":745:1001  function what_ever() public{... */
    tag_26:
        /* "testContract_afterparse.sol":802:839  keccak256("what_ever_func(uint obj)") */
      mload(0x40)
      dup1
      dup1
      0x776861745f657665725f66756e632875696e74206f626a290000000000000000
      dup2
      mstore
      pop
      0x18
      add
      swap1
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      keccak256
        /* "testContract_afterparse.sol":840:841  0 */
      0x00
        /* "testContract_afterparse.sol":802:842  keccak256("what_ever_func(uint obj)")[0] */
      0x20
      dup2
      lt
      tag_57
      jumpi
      invalid
    tag_57:
      byte
      0xf8
      shl
        /* "testContract_afterparse.sol":782:842  what_ever_codePtr = keccak256("what_ever_func(uint obj)")[0] */
      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
      and
        /* "testContract_afterparse.sol":782:799  what_ever_codePtr */
      0x03
      0x00
        /* "testContract_afterparse.sol":782:842  what_ever_codePtr = keccak256("what_ever_func(uint obj)")[0] */
      0x0100
      exp
      dup2
      sload
      dup2
      0xffffffff
      mul
      not
      and
      swap1
      dup4
      0xe0
      shr
      mul
      or
      swap1
      sstore
      pop
        /* "testContract_afterparse.sol":958:980  what_ever_codePtr_slot */
      0x03
        /* "testContract_afterparse.sol":952:981  sload(what_ever_codePtr_slot) */
      sload
        /* "testContract_afterparse.sol":950:951  2 */
      0x02
        /* "testContract_afterparse.sol":948:949  1 */
      0x01
        /* "testContract_afterparse.sol":924:946  what_ever_codePtr_slot */
      0x03
        /* "testContract_afterparse.sol":918:947  sload(what_ever_codePtr_slot) */
      sload
        /* "testContract_afterparse.sol":915:917  32 */
      0x20
        /* "testContract_afterparse.sol":904:982  createslot(32,sload(what_ever_codePtr_slot),1,2,sload(what_ever_codePtr_slot)) */
      createslot
        /* "testContract_afterparse.sol":882:903  what_ever_slotId_slot */
      0x02
        /* "testContract_afterparse.sol":875:983  sstore(what_ever_slotId_slot,createslot(32,sload(what_ever_codePtr_slot),1,2,sload(what_ever_codePtr_slot))) */
      sstore
        /* "testContract_afterparse.sol":861:993  {... */
      jump	// out
        /* "testContract_afterparse.sol":708:739  bytes4 public what_ever_codePtr */
    tag_28:
      0x03
      0x00
      swap1
      sload
      swap1
      0x0100
      exp
      swap1
      div
      0xe0
      shl
      dup2
      jump	// out

    auxdata: 0xa2646970667358221220bc08e86bf47c6e5c4cd426ddb868bd39a1957f3fdbe0f1175e535b1d0d4a62df64736f6c63782c302e362e31312d646576656c6f702e323032302e362e32382b636f6d6d69742e63653537373565302e6d6f64005d
}
