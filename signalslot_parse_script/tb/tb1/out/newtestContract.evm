    /* "testContract_afterparse.sol":24:557  contract newtestContract {... */
  mstore(0x40, 0x80)
    /* "testContract_afterparse.sol":509:555  constructor() public {... */
  callvalue
  dup1
  iszero
  tag_1
  jumpi
  0x00
  dup1
  revert
tag_1:
  pop
    /* "testContract_afterparse.sol":534:551  PriceFeedUpdate() */
  tag_4
    /* "testContract_afterparse.sol":534:549  PriceFeedUpdate */
  shl(0x20, tag_5)
    /* "testContract_afterparse.sol":534:551  PriceFeedUpdate() */
  0x20
  shr
  jump	// in
tag_4:
    /* "testContract_afterparse.sol":24:557  contract newtestContract {... */
  jump(tag_6)
    /* "testContract_afterparse.sol":207:490  function PriceFeedUpdate() public{... */
tag_5:
    /* "testContract_afterparse.sol":272:311  keccak256("function PriceFeedUpdate()") */
  mload(0x40)
  dup1
  dup1
  0x66756e6374696f6e205072696365466565645570646174652829000000000000
  dup2
  mstore
  pop
  0x1a
  add
  swap1
  pop
  mload(0x40)
  dup1
  swap2
  sub
  swap1
  keccak256
    /* "testContract_afterparse.sol":312:313  0 */
  0x00
    /* "testContract_afterparse.sol":272:314  keccak256("function PriceFeedUpdate()")[0] */
  0x20
  dup2
  lt
  tag_8
  jumpi
  invalid
tag_8:
  byte
  0xf8
  shl
    /* "testContract_afterparse.sol":250:314  PriceFeedUpdate_key = keccak256("function PriceFeedUpdate()")[0] */
  not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
  and
    /* "testContract_afterparse.sol":250:269  PriceFeedUpdate_key */
  0x03
  0x00
    /* "testContract_afterparse.sol":250:314  PriceFeedUpdate_key = keccak256("function PriceFeedUpdate()")[0] */
  0x0100
  exp
  dup2
  sload
  dup2
  0xffffffff
  mul
  not
  and
  swap1
  dup4
  0xe0
  shr
  mul
  or
  swap1
  sstore
  pop
    /* "testContract_afterparse.sol":386:410  PriceFeedUpdate_key_slot */
  0x03
    /* "testContract_afterparse.sol":380:411  sload(PriceFeedUpdate_key_slot) */
  sload
    /* "testContract_afterparse.sol":376:378  32 */
  0x20
    /* "testContract_afterparse.sol":366:412  createsig(32, sload(PriceFeedUpdate_key_slot)) */
  createsig
    /* "testContract_afterparse.sol":339:365  PriceFeedUpdate_sigId_slot */
  0x02
    /* "testContract_afterparse.sol":332:413  sstore(PriceFeedUpdate_sigId_slot,createsig(32, sload(PriceFeedUpdate_key_slot))) */
  sstore
    /* "testContract_afterparse.sol":454:479  PriceFeedUpdate_data_slot */
  0x00
    /* "testContract_afterparse.sol":424:453  PriceFeedUpdate_dataslot_slot */
  0x01
    /* "testContract_afterparse.sol":417:480  mstore(PriceFeedUpdate_dataslot_slot,PriceFeedUpdate_data_slot) */
  mstore
    /* "testContract_afterparse.sol":327:484  {... */
  jump	// out
    /* "testContract_afterparse.sol":24:557  contract newtestContract {... */
tag_6:
  dataSize(sub_0)
  dup1
  dataOffset(sub_0)
  0x00
  codecopy
  0x00
  return
stop

sub_0: assembly {
        /* "testContract_afterparse.sol":24:557  contract newtestContract {... */
      mstore(0x40, 0x80)
      callvalue
      dup1
      iszero
      tag_1
      jumpi
      0x00
      dup1
      revert
    tag_1:
      pop
      jumpi(tag_2, lt(calldatasize, 0x04))
      shr(0xe0, calldataload(0x00))
      dup1
      0x23d093cd
      eq
      tag_3
      jumpi
      dup1
      0x25e29249
      eq
      tag_4
      jumpi
      dup1
      0x329eed9c
      eq
      tag_5
      jumpi
      dup1
      0xde74b3c0
      eq
      tag_6
      jumpi
      dup1
      0xf6310288
      eq
      tag_7
      jumpi
    tag_2:
      0x00
      dup1
      revert
        /* "testContract_afterparse.sol":52:84  uint public PriceFeedUpdate_data */
    tag_3:
      tag_8
      tag_9
      jump	// in
    tag_8:
      mload(0x40)
      dup1
      dup3
      dup2
      mstore
      0x20
      add
      swap2
      pop
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      return
        /* "testContract_afterparse.sol":127:160  uint public PriceFeedUpdate_sigId */
    tag_4:
      tag_10
      tag_11
      jump	// in
    tag_10:
      mload(0x40)
      dup1
      dup3
      dup2
      mstore
      0x20
      add
      swap2
      pop
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      return
        /* "testContract_afterparse.sol":166:199  bytes4 public PriceFeedUpdate_key */
    tag_5:
      tag_12
      tag_13
      jump	// in
    tag_12:
      mload(0x40)
      dup1
      dup3
      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
      and
      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
      and
      dup2
      mstore
      0x20
      add
      swap2
      pop
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      return
        /* "testContract_afterparse.sol":207:490  function PriceFeedUpdate() public{... */
    tag_6:
      tag_14
      tag_15
      jump	// in
    tag_14:
      stop
        /* "testContract_afterparse.sol":87:124  bytes public PriceFeedUpdate_dataslot */
    tag_7:
      tag_16
      tag_17
      jump	// in
    tag_16:
      mload(0x40)
      dup1
      dup1
      0x20
      add
      dup3
      dup2
      sub
      dup3
      mstore
      dup4
      dup2
      dup2
      mload
      dup2
      mstore
      0x20
      add
      swap2
      pop
      dup1
      mload
      swap1
      0x20
      add
      swap1
      dup1
      dup4
      dup4
      0x00
    tag_18:
      dup4
      dup2
      lt
      iszero
      tag_20
      jumpi
      dup1
      dup3
      add
      mload
      dup2
      dup5
      add
      mstore
      0x20
      dup2
      add
      swap1
      pop
      jump(tag_18)
    tag_20:
      pop
      pop
      pop
      pop
      swap1
      pop
      swap1
      dup2
      add
      swap1
      0x1f
      and
      dup1
      iszero
      tag_21
      jumpi
      dup1
      dup3
      sub
      dup1
      mload
      0x01
      dup4
      0x20
      sub
      0x0100
      exp
      sub
      not
      and
      dup2
      mstore
      0x20
      add
      swap2
      pop
    tag_21:
      pop
      swap3
      pop
      pop
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      return
        /* "testContract_afterparse.sol":52:84  uint public PriceFeedUpdate_data */
    tag_9:
      sload(0x00)
      dup2
      jump	// out
        /* "testContract_afterparse.sol":127:160  uint public PriceFeedUpdate_sigId */
    tag_11:
      sload(0x02)
      dup2
      jump	// out
        /* "testContract_afterparse.sol":166:199  bytes4 public PriceFeedUpdate_key */
    tag_13:
      0x03
      0x00
      swap1
      sload
      swap1
      0x0100
      exp
      swap1
      div
      0xe0
      shl
      dup2
      jump	// out
        /* "testContract_afterparse.sol":207:490  function PriceFeedUpdate() public{... */
    tag_15:
        /* "testContract_afterparse.sol":272:311  keccak256("function PriceFeedUpdate()") */
      mload(0x40)
      dup1
      dup1
      0x66756e6374696f6e205072696365466565645570646174652829000000000000
      dup2
      mstore
      pop
      0x1a
      add
      swap1
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      keccak256
        /* "testContract_afterparse.sol":312:313  0 */
      0x00
        /* "testContract_afterparse.sol":272:314  keccak256("function PriceFeedUpdate()")[0] */
      0x20
      dup2
      lt
      tag_23
      jumpi
      invalid
    tag_23:
      byte
      0xf8
      shl
        /* "testContract_afterparse.sol":250:314  PriceFeedUpdate_key = keccak256("function PriceFeedUpdate()")[0] */
      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
      and
        /* "testContract_afterparse.sol":250:269  PriceFeedUpdate_key */
      0x03
      0x00
        /* "testContract_afterparse.sol":250:314  PriceFeedUpdate_key = keccak256("function PriceFeedUpdate()")[0] */
      0x0100
      exp
      dup2
      sload
      dup2
      0xffffffff
      mul
      not
      and
      swap1
      dup4
      0xe0
      shr
      mul
      or
      swap1
      sstore
      pop
        /* "testContract_afterparse.sol":386:410  PriceFeedUpdate_key_slot */
      0x03
        /* "testContract_afterparse.sol":380:411  sload(PriceFeedUpdate_key_slot) */
      sload
        /* "testContract_afterparse.sol":376:378  32 */
      0x20
        /* "testContract_afterparse.sol":366:412  createsig(32, sload(PriceFeedUpdate_key_slot)) */
      createsig
        /* "testContract_afterparse.sol":339:365  PriceFeedUpdate_sigId_slot */
      0x02
        /* "testContract_afterparse.sol":332:413  sstore(PriceFeedUpdate_sigId_slot,createsig(32, sload(PriceFeedUpdate_key_slot))) */
      sstore
        /* "testContract_afterparse.sol":454:479  PriceFeedUpdate_data_slot */
      0x00
        /* "testContract_afterparse.sol":424:453  PriceFeedUpdate_dataslot_slot */
      0x01
        /* "testContract_afterparse.sol":417:480  mstore(PriceFeedUpdate_dataslot_slot,PriceFeedUpdate_data_slot) */
      mstore
        /* "testContract_afterparse.sol":327:484  {... */
      jump	// out
        /* "testContract_afterparse.sol":87:124  bytes public PriceFeedUpdate_dataslot */
    tag_17:
      0x01
      dup1
      sload
      0x01
      dup2
      0x01
      and
      iszero
      0x0100
      mul
      sub
      and
      0x02
      swap1
      div
      dup1
      0x1f
      add
      0x20
      dup1
      swap2
      div
      mul
      0x20
      add
      mload(0x40)
      swap1
      dup2
      add
      0x40
      mstore
      dup1
      swap3
      swap2
      swap1
      dup2
      dup2
      mstore
      0x20
      add
      dup3
      dup1
      sload
      0x01
      dup2
      0x01
      and
      iszero
      0x0100
      mul
      sub
      and
      0x02
      swap1
      div
      dup1
      iszero
      tag_24
      jumpi
      dup1
      0x1f
      lt
      tag_25
      jumpi
      0x0100
      dup1
      dup4
      sload
      div
      mul
      dup4
      mstore
      swap2
      0x20
      add
      swap2
      jump(tag_24)
    tag_25:
      dup3
      add
      swap2
      swap1
      0x00
      mstore
      keccak256(0x00, 0x20)
      swap1
    tag_26:
      dup2
      sload
      dup2
      mstore
      swap1
      0x01
      add
      swap1
      0x20
      add
      dup1
      dup4
      gt
      tag_26
      jumpi
      dup3
      swap1
      sub
      0x1f
      and
      dup3
      add
      swap2
    tag_24:
      pop
      pop
      pop
      pop
      pop
      dup2
      jump	// out

    auxdata: 0xa26469706673582212205dafde4c49a4f093d5cb8302a32bd36c7cc660f05e7dc05b94162d65664cface64736f6c63782c302e362e31312d646576656c6f702e323032302e362e32382b636f6d6d69742e63653537373565302e6d6f64005d
}
