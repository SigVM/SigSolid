    /* "testContract_afterparse.sol":561:2906  contract testContract {... */
  mstore(0x40, 0x80)
    /* "testContract_afterparse.sol":2013:2053  constructor() public {... */
  callvalue
  dup1
  iszero
  tag_1
  jumpi
  0x00
  dup1
  revert
tag_1:
  pop
    /* "testContract_afterparse.sol":2038:2049  what_ever() */
  tag_4
    /* "testContract_afterparse.sol":2038:2047  what_ever */
  shl(0x20, tag_5)
    /* "testContract_afterparse.sol":2038:2049  what_ever() */
  0x20
  shr
  jump	// in
tag_4:
    /* "testContract_afterparse.sol":561:2906  contract testContract {... */
  jump(tag_6)
    /* "testContract_afterparse.sol":751:1010  function what_ever() public{... */
tag_5:
    /* "testContract_afterparse.sol":808:848  keccak256("what_ever_func(bytes32 obj)") */
  mload(0x40)
  dup1
  dup1
  0x776861745f657665725f66756e632862797465733332206f626a290000000000
  dup2
  mstore
  pop
  0x1b
  add
  swap1
  pop
  mload(0x40)
  dup1
  swap2
  sub
  swap1
  keccak256
    /* "testContract_afterparse.sol":849:850  0 */
  0x00
    /* "testContract_afterparse.sol":808:851  keccak256("what_ever_func(bytes32 obj)")[0] */
  0x20
  dup2
  lt
  tag_8
  jumpi
  invalid
tag_8:
  byte
  0xf8
  shl
    /* "testContract_afterparse.sol":788:851  what_ever_codePtr = keccak256("what_ever_func(bytes32 obj)")[0] */
  not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
  and
    /* "testContract_afterparse.sol":788:805  what_ever_codePtr */
  0x03
  0x00
    /* "testContract_afterparse.sol":788:851  what_ever_codePtr = keccak256("what_ever_func(bytes32 obj)")[0] */
  0x0100
  exp
  dup2
  sload
  dup2
  0xffffffff
  mul
  not
  and
  swap1
  dup4
  0xe0
  shr
  mul
  or
  swap1
  sstore
  pop
    /* "testContract_afterparse.sol":967:989  what_ever_codePtr_slot */
  0x03
    /* "testContract_afterparse.sol":961:990  sload(what_ever_codePtr_slot) */
  sload
    /* "testContract_afterparse.sol":959:960  2 */
  0x02
    /* "testContract_afterparse.sol":957:958  1 */
  0x01
    /* "testContract_afterparse.sol":933:955  what_ever_codePtr_slot */
  0x03
    /* "testContract_afterparse.sol":927:956  sload(what_ever_codePtr_slot) */
  sload
    /* "testContract_afterparse.sol":924:926  32 */
  0x20
    /* "testContract_afterparse.sol":913:991  createslot(32,sload(what_ever_codePtr_slot),1,2,sload(what_ever_codePtr_slot)) */
  createslot
    /* "testContract_afterparse.sol":891:912  what_ever_slotId_slot */
  0x02
    /* "testContract_afterparse.sol":884:992  sstore(what_ever_slotId_slot,createslot(32,sload(what_ever_codePtr_slot),1,2,sload(what_ever_codePtr_slot))) */
  sstore
    /* "testContract_afterparse.sol":870:1002  {... */
  jump	// out
    /* "testContract_afterparse.sol":561:2906  contract testContract {... */
tag_6:
  dataSize(sub_0)
  dup1
  dataOffset(sub_0)
  0x00
  codecopy
  0x00
  return
stop

sub_0: assembly {
        /* "testContract_afterparse.sol":561:2906  contract testContract {... */
      mstore(0x40, 0x80)
      callvalue
      dup1
      iszero
      tag_1
      jumpi
      0x00
      dup1
      revert
    tag_1:
      pop
      jumpi(tag_2, lt(calldatasize, 0x04))
      shr(0xe0, calldataload(0x00))
      dup1
      0xa0a25d6b
      gt
      tag_12
      jumpi
      dup1
      0xa0a25d6b
      eq
      tag_7
      jumpi
      dup1
      0xbfa814b5
      eq
      tag_8
      jumpi
      dup1
      0xc8c2d18e
      eq
      tag_9
      jumpi
      dup1
      0xe0279d08
      eq
      tag_10
      jumpi
      dup1
      0xff44a36c
      eq
      tag_11
      jumpi
      jump(tag_2)
    tag_12:
      dup1
      0x165035e2
      eq
      tag_3
      jumpi
      dup1
      0x395f9b8d
      eq
      tag_4
      jumpi
      dup1
      0x434d081c
      eq
      tag_5
      jumpi
      dup1
      0x81b28b60
      eq
      tag_6
      jumpi
    tag_2:
      0x00
      dup1
      revert
        /* "testContract_afterparse.sol":628:663  uint public constant ONE_HOUR = 180 */
    tag_3:
      tag_13
      tag_14
      jump	// in
    tag_13:
      mload(0x40)
      dup1
      dup3
      dup2
      mstore
      0x20
      add
      swap2
      pop
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      return
        /* "testContract_afterparse.sol":1182:1419  function bindfunc() public view{... */
    tag_4:
      tag_15
      tag_16
      jump	// in
    tag_15:
      stop
        /* "testContract_afterparse.sol":680:708  uint public what_ever_slotId */
    tag_5:
      tag_17
      tag_18
      jump	// in
    tag_17:
      mload(0x40)
      dup1
      dup3
      dup2
      mstore
      0x20
      add
      swap2
      pop
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      return
        /* "testContract_afterparse.sol":1771:2011  function detachfunc() public view{... */
    tag_6:
      tag_19
      tag_20
      jump	// in
    tag_19:
      stop
        /* "testContract_afterparse.sol":1424:1766  function emitfunc() public view{... */
    tag_7:
      tag_21
      tag_22
      jump	// in
    tag_21:
      stop
        /* "testContract_afterparse.sol":2055:2904  function func() public returns (uint32, uint32) {... */
    tag_8:
      tag_23
      tag_24
      jump	// in
    tag_23:
      mload(0x40)
      dup1
      dup4
      0xffffffff
      and
      0xffffffff
      and
      dup2
      mstore
      0x20
      add
      dup3
      0xffffffff
      and
      0xffffffff
      and
      dup2
      mstore
      0x20
      add
      swap3
      pop
      pop
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      return
        /* "testContract_afterparse.sol":751:1010  function what_ever() public{... */
    tag_9:
      tag_25
      tag_26
      jump	// in
    tag_25:
      stop
        /* "testContract_afterparse.sol":714:745  bytes4 public what_ever_codePtr */
    tag_10:
      tag_27
      tag_28
      jump	// in
    tag_27:
      mload(0x40)
      dup1
      dup3
      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
      and
      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
      and
      dup2
      mstore
      0x20
      add
      swap2
      pop
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      return
        /* "testContract_afterparse.sol":1015:1180  function what_ever_func(bytes32 obj) public{... */
    tag_11:
      tag_29
      0x04
      dup1
      calldatasize
      sub
      0x20
      dup2
      lt
      iszero
      tag_30
      jumpi
      0x00
      dup1
      revert
    tag_30:
      dup2
      add
      swap1
      dup1
      dup1
      calldataload
      swap1
      0x20
      add
      swap1
      swap3
      swap2
      swap1
      pop
      pop
      pop
      tag_31
      jump	// in
    tag_29:
      stop
        /* "testContract_afterparse.sol":628:663  uint public constant ONE_HOUR = 180 */
    tag_14:
        /* "testContract_afterparse.sol":660:663  180 */
      0xb4
        /* "testContract_afterparse.sol":628:663  uint public constant ONE_HOUR = 180 */
      dup2
      jump	// out
        /* "testContract_afterparse.sol":1182:1419  function bindfunc() public view{... */
    tag_16:
        /* "testContract_afterparse.sol":1217:1236  address dut_address */
      0x00
        /* "testContract_afterparse.sol":1247:1250  dut */
      dup1
      0x00
      swap1
      sload
      swap1
      0x0100
      exp
      swap1
      div
      0xffffffffffffffffffffffffffffffffffffffff
      and
        /* "testContract_afterparse.sol":1217:1251  address dut_address = address(dut) */
      swap1
      pop
        /* "testContract_afterparse.sol":1255:1285  uint dut_PriceFeedUpdate_sigId */
      0x00
        /* "testContract_afterparse.sol":1288:1291  dut */
      dup1
      0x00
      swap1
      sload
      swap1
      0x0100
      exp
      swap1
      div
      0xffffffffffffffffffffffffffffffffffffffff
      and
        /* "testContract_afterparse.sol":1288:1313  dut.PriceFeedUpdate_sigId */
      0xffffffffffffffffffffffffffffffffffffffff
      and
      0x25e29249
        /* "testContract_afterparse.sol":1288:1315  dut.PriceFeedUpdate_sigId() */
      mload(0x40)
      dup2
      0xffffffff
      and
      0xe0
      shl
      dup2
      mstore
      0x04
      add
      0x20
      mload(0x40)
      dup1
      dup4
      sub
      dup2
      dup7
      dup1
      extcodesize
      iszero
      dup1
      iszero
      tag_33
      jumpi
      0x00
      dup1
      revert
    tag_33:
      pop
      gas
      staticcall
      iszero
      dup1
      iszero
      tag_35
      jumpi
      returndatasize
      0x00
      dup1
      returndatacopy
      revert(0x00, returndatasize)
    tag_35:
      pop
      pop
      pop
      pop
      mload(0x40)
      returndatasize
      0x20
      dup2
      lt
      iszero
      tag_36
      jumpi
      0x00
      dup1
      revert
    tag_36:
      dup2
      add
      swap1
      dup1
      dup1
      mload
      swap1
      0x20
      add
      swap1
      swap3
      swap2
      swap1
      pop
      pop
      pop
        /* "testContract_afterparse.sol":1255:1315  uint dut_PriceFeedUpdate_sigId = dut.PriceFeedUpdate_sigId() */
      swap1
      pop
        /* "testContract_afterparse.sol":1385:1406  what_ever_slotId_slot */
      0x02
        /* "testContract_afterparse.sol":1379:1407  sload(what_ever_slotId_slot) */
      sload
        /* "testContract_afterparse.sol":1353:1378  dut_PriceFeedUpdate_sigId */
      dup2
        /* "testContract_afterparse.sol":1341:1352  dut_address */
      dup4
        /* "testContract_afterparse.sol":1333:1408  bindsig(dut_address,dut_PriceFeedUpdate_sigId,sload(what_ever_slotId_slot)) */
      bindsig
        /* "testContract_afterparse.sol":1328:1415  {... */
      pop
      pop
      jump	// out
        /* "testContract_afterparse.sol":680:708  uint public what_ever_slotId */
    tag_18:
      sload(0x02)
      dup2
      jump	// out
        /* "testContract_afterparse.sol":1771:2011  function detachfunc() public view{... */
    tag_20:
        /* "testContract_afterparse.sol":1808:1838  uint dut_PriceFeedUpdate_sigId */
      0x00
        /* "testContract_afterparse.sol":1841:1844  dut */
      dup1
      0x00
      swap1
      sload
      swap1
      0x0100
      exp
      swap1
      div
      0xffffffffffffffffffffffffffffffffffffffff
      and
        /* "testContract_afterparse.sol":1841:1866  dut.PriceFeedUpdate_sigId */
      0xffffffffffffffffffffffffffffffffffffffff
      and
      0x25e29249
        /* "testContract_afterparse.sol":1841:1868  dut.PriceFeedUpdate_sigId() */
      mload(0x40)
      dup2
      0xffffffff
      and
      0xe0
      shl
      dup2
      mstore
      0x04
      add
      0x20
      mload(0x40)
      dup1
      dup4
      sub
      dup2
      dup7
      dup1
      extcodesize
      iszero
      dup1
      iszero
      tag_38
      jumpi
      0x00
      dup1
      revert
    tag_38:
      pop
      gas
      staticcall
      iszero
      dup1
      iszero
      tag_40
      jumpi
      returndatasize
      0x00
      dup1
      returndatacopy
      revert(0x00, returndatasize)
    tag_40:
      pop
      pop
      pop
      pop
      mload(0x40)
      returndatasize
      0x20
      dup2
      lt
      iszero
      tag_41
      jumpi
      0x00
      dup1
      revert
    tag_41:
      dup2
      add
      swap1
      dup1
      dup1
      mload
      swap1
      0x20
      add
      swap1
      swap3
      swap2
      swap1
      pop
      pop
      pop
        /* "testContract_afterparse.sol":1808:1868  uint dut_PriceFeedUpdate_sigId = dut.PriceFeedUpdate_sigId() */
      swap1
      pop
        /* "testContract_afterparse.sol":1872:1891  address dut_address */
      0x00
        /* "testContract_afterparse.sol":1902:1905  dut */
      dup1
      0x00
      swap1
      sload
      swap1
      0x0100
      exp
      swap1
      div
      0xffffffffffffffffffffffffffffffffffffffff
      and
        /* "testContract_afterparse.sol":1872:1906  address dut_address = address(dut) */
      swap1
      pop
        /* "testContract_afterparse.sol":1977:1998  what_ever_slotId_slot */
      0x02
        /* "testContract_afterparse.sol":1971:1999  sload(what_ever_slotId_slot) */
      sload
        /* "testContract_afterparse.sol":1945:1970  dut_PriceFeedUpdate_sigId */
      dup3
        /* "testContract_afterparse.sol":1933:1944  dut_address */
      dup3
        /* "testContract_afterparse.sol":1923:2000  detachsig(dut_address,dut_PriceFeedUpdate_sigId,sload(what_ever_slotId_slot)) */
      detachsig
        /* "testContract_afterparse.sol":1918:2004  {... */
      pop
      pop
      jump	// out
        /* "testContract_afterparse.sol":1424:1766  function emitfunc() public view{... */
    tag_22:
        /* "testContract_afterparse.sol":1459:1500  bytes memory dut_PriceFeedUpdate_dataslot */
      0x60
        /* "testContract_afterparse.sol":1503:1506  dut */
      0x00
      dup1
      swap1
      sload
      swap1
      0x0100
      exp
      swap1
      div
      0xffffffffffffffffffffffffffffffffffffffff
      and
        /* "testContract_afterparse.sol":1503:1531  dut.PriceFeedUpdate_dataslot */
      0xffffffffffffffffffffffffffffffffffffffff
      and
      0xf6310288
        /* "testContract_afterparse.sol":1503:1533  dut.PriceFeedUpdate_dataslot() */
      mload(0x40)
      dup2
      0xffffffff
      and
      0xe0
      shl
      dup2
      mstore
      0x04
      add
      0x00
      mload(0x40)
      dup1
      dup4
      sub
      dup2
      dup7
      dup1
      extcodesize
      iszero
      dup1
      iszero
      tag_43
      jumpi
      0x00
      dup1
      revert
    tag_43:
      pop
      gas
      staticcall
      iszero
      dup1
      iszero
      tag_45
      jumpi
      returndatasize
      0x00
      dup1
      returndatacopy
      revert(0x00, returndatasize)
    tag_45:
      pop
      pop
      pop
      pop
      mload(0x40)
      returndatasize
      0x00
      dup3
      returndatacopy
      returndatasize
      not(0x1f)
      0x1f
      dup3
      add
      and
      dup3
      add
      dup1
      0x40
      mstore
      pop
      0x20
      dup2
      lt
      iszero
      tag_46
      jumpi
      0x00
      dup1
      revert
    tag_46:
      dup2
      add
      swap1
      dup1
      dup1
      mload
      mload(0x40)
      swap4
      swap3
      swap2
      swap1
      dup5
      0x0100000000
      dup3
      gt
      iszero
      tag_47
      jumpi
      0x00
      dup1
      revert
    tag_47:
      dup4
      dup3
      add
      swap2
      pop
      0x20
      dup3
      add
      dup6
      dup2
      gt
      iszero
      tag_48
      jumpi
      0x00
      dup1
      revert
    tag_48:
      dup3
      mload
      dup7
      0x01
      dup3
      mul
      dup4
      add
      gt
      0x0100000000
      dup3
      gt
      or
      iszero
      tag_49
      jumpi
      0x00
      dup1
      revert
    tag_49:
      dup1
      dup4
      mstore
      0x20
      dup4
      add
      swap3
      pop
      pop
      pop
      swap1
      dup1
      mload
      swap1
      0x20
      add
      swap1
      dup1
      dup4
      dup4
      0x00
    tag_50:
      dup4
      dup2
      lt
      iszero
      tag_52
      jumpi
      dup1
      dup3
      add
      mload
      dup2
      dup5
      add
      mstore
      0x20
      dup2
      add
      swap1
      pop
      jump(tag_50)
    tag_52:
      pop
      pop
      pop
      pop
      swap1
      pop
      swap1
      dup2
      add
      swap1
      0x1f
      and
      dup1
      iszero
      tag_53
      jumpi
      dup1
      dup3
      sub
      dup1
      mload
      0x01
      dup4
      0x20
      sub
      0x0100
      exp
      sub
      not
      and
      dup2
      mstore
      0x20
      add
      swap2
      pop
    tag_53:
      pop
      0x40
      mstore
      pop
      pop
      pop
        /* "testContract_afterparse.sol":1459:1533  bytes memory dut_PriceFeedUpdate_dataslot = dut.PriceFeedUpdate_dataslot() */
      swap1
      pop
        /* "testContract_afterparse.sol":1537:1567  uint dut_PriceFeedUpdate_sigId */
      0x00
        /* "testContract_afterparse.sol":1570:1573  dut */
      dup1
      0x00
      swap1
      sload
      swap1
      0x0100
      exp
      swap1
      div
      0xffffffffffffffffffffffffffffffffffffffff
      and
        /* "testContract_afterparse.sol":1570:1595  dut.PriceFeedUpdate_sigId */
      0xffffffffffffffffffffffffffffffffffffffff
      and
      0x25e29249
        /* "testContract_afterparse.sol":1570:1597  dut.PriceFeedUpdate_sigId() */
      mload(0x40)
      dup2
      0xffffffff
      and
      0xe0
      shl
      dup2
      mstore
      0x04
      add
      0x20
      mload(0x40)
      dup1
      dup4
      sub
      dup2
      dup7
      dup1
      extcodesize
      iszero
      dup1
      iszero
      tag_54
      jumpi
      0x00
      dup1
      revert
    tag_54:
      pop
      gas
      staticcall
      iszero
      dup1
      iszero
      tag_56
      jumpi
      returndatasize
      0x00
      dup1
      returndatacopy
      revert(0x00, returndatasize)
    tag_56:
      pop
      pop
      pop
      pop
      mload(0x40)
      returndatasize
      0x20
      dup2
      lt
      iszero
      tag_57
      jumpi
      0x00
      dup1
      revert
    tag_57:
      dup2
      add
      swap1
      dup1
      dup1
      mload
      swap1
      0x20
      add
      swap1
      swap3
      swap2
      swap1
      pop
      pop
      pop
        /* "testContract_afterparse.sol":1537:1597  uint dut_PriceFeedUpdate_sigId = dut.PriceFeedUpdate_sigId() */
      swap1
      pop
        /* "testContract_afterparse.sol":1657:1671  price_xyz_slot */
      0x01
        /* "testContract_afterparse.sol":1651:1672  mload(price_xyz_slot) */
      mload
        /* "testContract_afterparse.sol":1622:1650  dut_PriceFeedUpdate_dataslot */
      dup3
        /* "testContract_afterparse.sol":1615:1673  mstore(dut_PriceFeedUpdate_dataslot,mload(price_xyz_slot)) */
      mstore
        /* "testContract_afterparse.sol":1749:1751  32 */
      0x20
        /* "testContract_afterparse.sol":1720:1748  dut_PriceFeedUpdate_dataslot */
      dup3
        /* "testContract_afterparse.sol":1711:1719  ONE_HOUR */
      0xb4
        /* "testContract_afterparse.sol":1685:1710  dut_PriceFeedUpdate_sigId */
      dup4
        /* "testContract_afterparse.sol":1677:1752  emitsig(dut_PriceFeedUpdate_sigId,ONE_HOUR,dut_PriceFeedUpdate_dataslot,32) */
      emitsig
        /* "testContract_afterparse.sol":1610:1759  {... */
      pop
      pop
      jump	// out
        /* "testContract_afterparse.sol":2055:2904  function func() public returns (uint32, uint32) {... */
    tag_24:
        /* "testContract_afterparse.sol":2087:2093  uint32 */
      0x00
        /* "testContract_afterparse.sol":2095:2101  uint32 */
      dup1
        /* "testContract_afterparse.sol":2107:2127  uint32[2] memory ret */
      tag_59
      tag_60
      jump	// in
    tag_59:
        /* "testContract_afterparse.sol":2225:2240  bytes4 selector */
      0x00
        /* "testContract_afterparse.sol":2286:2289  224 */
      0xe0
        /* "testContract_afterparse.sol":2250:2282  keccak256("func(uint256,uint8)") */
      mload(0x40)
      dup1
      dup1
      0x66756e632875696e743235362c75696e74382900000000000000000000000000
      dup2
      mstore
      pop
      0x13
      add
      swap1
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      keccak256
        /* "testContract_afterparse.sol":2250:2289  keccak256("func(uint256,uint8)") >> 224 */
      swap1
      shr
        /* "testContract_afterparse.sol":2225:2290  bytes4 selector = bytes4(keccak256("func(uint256,uint8)") >> 224) */
      swap1
      pop
        /* "testContract_afterparse.sol":2295:2312  bytes memory data */
      0x60
        /* "testContract_afterparse.sol":2338:2346  selector */
      dup2
        /* "testContract_afterparse.sol":2356:2359  789 */
      0x0315
        /* "testContract_afterparse.sol":2368:2371  123 */
      0x7b
        /* "testContract_afterparse.sol":2315:2373  abi.encodeWithSelector(selector, uint256(789), uint8(123)) */
      add(0x24, mload(0x40))
      dup1
      dup4
      dup2
      mstore
      0x20
      add
      dup3
      0xff
      and
      0xff
      and
      dup2
      mstore
      0x20
      add
      swap3
      pop
      pop
      pop
      mload(0x40)
      0x20
      dup2
      dup4
      sub
      sub
      dup2
      mstore
      swap1
      0x40
      mstore
      swap1
      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
      and
      0x20
      dup3
      add
      dup1
      mload
      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff
      dup4
      dup2
      dup4
      and
      or
      dup4
      mstore
      pop
      pop
      pop
      pop
        /* "testContract_afterparse.sol":2295:2373  bytes memory data = abi.encodeWithSelector(selector, uint256(789), uint8(123)) */
      swap1
      pop
        /* "testContract_afterparse.sol":2778:2779  8 */
      0x08
        /* "testContract_afterparse.sol":2730:2733  ret */
      dup4
        /* "testContract_afterparse.sol":2663:2667  data */
      dup3
        /* "testContract_afterparse.sol":2657:2668  mload(data) */
      mload
        /* "testContract_afterparse.sol":2595:2597  32 */
      0x20
        /* "testContract_afterparse.sol":2589:2593  data */
      dup5
        /* "testContract_afterparse.sol":2585:2598  add(data, 32) */
      add
        /* "testContract_afterparse.sol":2536:2537  0 */
      0x00
        /* "testContract_afterparse.sol":2476:2480  0x20 */
      0x20
        /* "testContract_afterparse.sol":2417:2418  1 */
      0x01
        /* "testContract_afterparse.sol":2407:2823  call(... */
      call
        /* "testContract_afterparse.sol":2837:2844  success */
      dup1
        /* "testContract_afterparse.sol":2827:2829  if */
      tag_61
      jumpi
        /* "testContract_afterparse.sol":2862:2863  0 */
      0x00
        /* "testContract_afterparse.sol":2859:2860  0 */
      dup1
        /* "testContract_afterparse.sol":2852:2864  revert(0, 0) */
      revert
        /* "testContract_afterparse.sol":2827:2829  if */
    tag_61:
        /* "testContract_afterparse.sol":2387:2873  {... */
      pop
        /* "testContract_afterparse.sol":2885:2888  ret */
      dup3
        /* "testContract_afterparse.sol":2889:2890  0 */
      0x00
        /* "testContract_afterparse.sol":2885:2891  ret[0] */
      0x02
      dup2
      lt
      tag_62
      jumpi
      invalid
    tag_62:
      0x20
      mul
      add
      mload
        /* "testContract_afterparse.sol":2893:2896  ret */
      dup4
        /* "testContract_afterparse.sol":2897:2898  1 */
      0x01
        /* "testContract_afterparse.sol":2893:2899  ret[1] */
      0x02
      dup2
      lt
      tag_63
      jumpi
      invalid
    tag_63:
      0x20
      mul
      add
      mload
        /* "testContract_afterparse.sol":2877:2900  return (ret[0], ret[1]) */
      swap5
      pop
      swap5
      pop
      pop
      pop
      pop
        /* "testContract_afterparse.sol":2055:2904  function func() public returns (uint32, uint32) {... */
      swap1
      swap2
      jump	// out
        /* "testContract_afterparse.sol":751:1010  function what_ever() public{... */
    tag_26:
        /* "testContract_afterparse.sol":808:848  keccak256("what_ever_func(bytes32 obj)") */
      mload(0x40)
      dup1
      dup1
      0x776861745f657665725f66756e632862797465733332206f626a290000000000
      dup2
      mstore
      pop
      0x1b
      add
      swap1
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      keccak256
        /* "testContract_afterparse.sol":849:850  0 */
      0x00
        /* "testContract_afterparse.sol":808:851  keccak256("what_ever_func(bytes32 obj)")[0] */
      0x20
      dup2
      lt
      tag_65
      jumpi
      invalid
    tag_65:
      byte
      0xf8
      shl
        /* "testContract_afterparse.sol":788:851  what_ever_codePtr = keccak256("what_ever_func(bytes32 obj)")[0] */
      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
      and
        /* "testContract_afterparse.sol":788:805  what_ever_codePtr */
      0x03
      0x00
        /* "testContract_afterparse.sol":788:851  what_ever_codePtr = keccak256("what_ever_func(bytes32 obj)")[0] */
      0x0100
      exp
      dup2
      sload
      dup2
      0xffffffff
      mul
      not
      and
      swap1
      dup4
      0xe0
      shr
      mul
      or
      swap1
      sstore
      pop
        /* "testContract_afterparse.sol":967:989  what_ever_codePtr_slot */
      0x03
        /* "testContract_afterparse.sol":961:990  sload(what_ever_codePtr_slot) */
      sload
        /* "testContract_afterparse.sol":959:960  2 */
      0x02
        /* "testContract_afterparse.sol":957:958  1 */
      0x01
        /* "testContract_afterparse.sol":933:955  what_ever_codePtr_slot */
      0x03
        /* "testContract_afterparse.sol":927:956  sload(what_ever_codePtr_slot) */
      sload
        /* "testContract_afterparse.sol":924:926  32 */
      0x20
        /* "testContract_afterparse.sol":913:991  createslot(32,sload(what_ever_codePtr_slot),1,2,sload(what_ever_codePtr_slot)) */
      createslot
        /* "testContract_afterparse.sol":891:912  what_ever_slotId_slot */
      0x02
        /* "testContract_afterparse.sol":884:992  sstore(what_ever_slotId_slot,createslot(32,sload(what_ever_codePtr_slot),1,2,sload(what_ever_codePtr_slot))) */
      sstore
        /* "testContract_afterparse.sol":870:1002  {... */
      jump	// out
        /* "testContract_afterparse.sol":714:745  bytes4 public what_ever_codePtr */
    tag_28:
      0x03
      0x00
      swap1
      sload
      swap1
      0x0100
      exp
      swap1
      div
      0xe0
      shl
      dup2
      jump	// out
        /* "testContract_afterparse.sol":1015:1180  function what_ever_func(bytes32 obj) public{... */
    tag_31:
        /* "testContract_afterparse.sol":1082:1085  obj */
      dup1
        /* "testContract_afterparse.sol":1070:1079  price_xyz */
      0x01
        /* "testContract_afterparse.sol":1070:1085  price_xyz = obj */
      dup2
      swap1
      sstore
      pop
        /* "testContract_afterparse.sol":1111:1114  obj */
      dup1
        /* "testContract_afterparse.sol":1099:1108  price_xyz */
      0x01
        /* "testContract_afterparse.sol":1099:1114  price_xyz = obj */
      dup2
      swap1
      sstore
      pop
        /* "testContract_afterparse.sol":1140:1143  obj */
      dup1
        /* "testContract_afterparse.sol":1128:1137  price_xyz */
      0x01
        /* "testContract_afterparse.sol":1128:1143  price_xyz = obj */
      dup2
      swap1
      sstore
      pop
        /* "testContract_afterparse.sol":1169:1172  obj */
      dup1
        /* "testContract_afterparse.sol":1157:1166  price_xyz */
      0x01
        /* "testContract_afterparse.sol":1157:1172  price_xyz = obj */
      dup2
      swap1
      sstore
      pop
        /* "testContract_afterparse.sol":1015:1180  function what_ever_func(bytes32 obj) public{... */
      pop
      jump	// out
    tag_60:
      mload(0x40)
      dup1
      0x40
      add
      0x40
      mstore
      dup1
      0x02
      swap1
      0x20
      dup3
      mul
      dup1
      calldatasize
      dup4
      calldatacopy
      dup1
      dup3
      add
      swap2
      pop
      pop
      swap1
      pop
      pop
      swap1
      jump	// out

    auxdata: 0xa264697066735822122002c5495118e76b3399539ecb544b72e4e06efb06f76673d2ff9dc1f7d9e4dc3964736f6c63782c302e362e31312d646576656c6f702e323032302e362e33302b636f6d6d69742e30643730623333312e6d6f64005d
}
