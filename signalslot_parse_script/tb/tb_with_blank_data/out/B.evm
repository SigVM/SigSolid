    /* "signaltest_afterparse.sol":1321:2366  contract B {... */
  mstore(0x40, 0x80)
    /* "signaltest_afterparse.sol":2321:2364  constructor() public {... */
  callvalue
  dup1
  iszero
  tag_1
  jumpi
  0x00
  dup1
  revert
tag_1:
  pop
    /* "signaltest_afterparse.sol":2346:2360  priceReceive() */
  tag_4
    /* "signaltest_afterparse.sol":2346:2358  priceReceive */
  shl(0x20, tag_5)
    /* "signaltest_afterparse.sol":2346:2360  priceReceive() */
  0x20
  shr
  jump	// in
tag_4:
    /* "signaltest_afterparse.sol":1321:2366  contract B {... */
  jump(tag_6)
    /* "signaltest_afterparse.sol":1492:1718  function priceReceive() public{... */
tag_5:
    /* "signaltest_afterparse.sol":1551:1583  keccak256("priceReceive_func()") */
  mload(0x40)
  dup1
  dup1
  0x7072696365526563656976655f66756e63282900000000000000000000000000
  dup2
  mstore
  pop
  0x13
  add
  swap1
  pop
  mload(0x40)
  dup1
  swap2
  sub
  swap1
  keccak256
    /* "signaltest_afterparse.sol":1532:1548  priceReceive_key */
  0x03
    /* "signaltest_afterparse.sol":1532:1583  priceReceive_key = keccak256("priceReceive_func()") */
  dup2
  swap1
  sstore
  pop
    /* "signaltest_afterparse.sol":1676:1697  priceReceive_key_slot */
  0x03
    /* "signaltest_afterparse.sol":1670:1698  sload(priceReceive_key_slot) */
  sload
    /* "signaltest_afterparse.sol":1664:1669  30000 */
  0x7530
    /* "signaltest_afterparse.sol":1661:1663  10 */
  0x0a
    /* "signaltest_afterparse.sol":1659:1660  0 */
  0x00
    /* "signaltest_afterparse.sol":1648:1699  createslot(0,10,30000,sload(priceReceive_key_slot)) */
  createslot
    /* "signaltest_afterparse.sol":1623:1647  priceReceive_status_slot */
  0x02
    /* "signaltest_afterparse.sol":1616:1700  sstore(priceReceive_status_slot,createslot(0,10,30000,sload(priceReceive_key_slot))) */
  sstore
    /* "signaltest_afterparse.sol":1602:1710  {... */
  jump	// out
    /* "signaltest_afterparse.sol":1321:2366  contract B {... */
tag_6:
  dataSize(sub_0)
  dup1
  dataOffset(sub_0)
  0x00
  codecopy
  0x00
  return
stop

sub_0: assembly {
        /* "signaltest_afterparse.sol":1321:2366  contract B {... */
      mstore(0x40, 0x80)
      callvalue
      dup1
      iszero
      tag_1
      jumpi
      0x00
      dup1
      revert
    tag_1:
      pop
      jumpi(tag_2, lt(calldatasize, 0x04))
      shr(0xe0, calldataload(0x00))
      dup1
      0x81b28b60
      gt
      tag_11
      jumpi
      dup1
      0x81b28b60
      eq
      tag_7
      jumpi
      dup1
      0xb6675486
      eq
      tag_8
      jumpi
      dup1
      0xf035ccc1
      eq
      tag_9
      jumpi
      dup1
      0xfd0bf5a3
      eq
      tag_10
      jumpi
      jump(tag_2)
    tag_11:
      dup1
      0x165035e2
      eq
      tag_3
      jumpi
      dup1
      0x25528630
      eq
      tag_4
      jumpi
      dup1
      0x395f9b8d
      eq
      tag_5
      jumpi
      dup1
      0x68c0b038
      eq
      tag_6
      jumpi
    tag_2:
      0x00
      dup1
      revert
        /* "signaltest_afterparse.sol":1377:1412  uint public constant ONE_HOUR = 180 */
    tag_3:
      tag_12
      tag_13
      jump	// in
    tag_12:
      mload(0x40)
      dup1
      dup3
      dup2
      mstore
      0x20
      add
      swap2
      pop
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      return
        /* "signaltest_afterparse.sol":1418:1449  uint public priceReceive_status */
    tag_4:
      tag_14
      tag_15
      jump	// in
    tag_14:
      mload(0x40)
      dup1
      dup3
      dup2
      mstore
      0x20
      add
      swap2
      pop
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      return
        /* "signaltest_afterparse.sol":1807:2059  function bindfunc() public view {... */
    tag_5:
      tag_16
      tag_17
      jump	// in
    tag_16:
      stop
        /* "signaltest_afterparse.sol":1343:1371  bytes32 public LocalPriceSum */
    tag_6:
      tag_18
      tag_19
      jump	// in
    tag_18:
      mload(0x40)
      dup1
      dup3
      dup2
      mstore
      0x20
      add
      swap2
      pop
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      return
        /* "signaltest_afterparse.sol":2064:2319  function detachfunc() public view {... */
    tag_7:
      tag_20
      tag_21
      jump	// in
    tag_20:
      stop
        /* "signaltest_afterparse.sol":1492:1718  function priceReceive() public{... */
    tag_8:
      tag_22
      tag_23
      jump	// in
    tag_22:
      stop
        /* "signaltest_afterparse.sol":1723:1805  function priceReceive_func() public{... */
    tag_9:
      tag_24
      tag_25
      jump	// in
    tag_24:
      stop
        /* "signaltest_afterparse.sol":1455:1486  bytes32 public priceReceive_key */
    tag_10:
      tag_26
      tag_27
      jump	// in
    tag_26:
      mload(0x40)
      dup1
      dup3
      dup2
      mstore
      0x20
      add
      swap2
      pop
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      return
        /* "signaltest_afterparse.sol":1377:1412  uint public constant ONE_HOUR = 180 */
    tag_13:
        /* "signaltest_afterparse.sol":1409:1412  180 */
      0xb4
        /* "signaltest_afterparse.sol":1377:1412  uint public constant ONE_HOUR = 180 */
      dup2
      jump	// out
        /* "signaltest_afterparse.sol":1418:1449  uint public priceReceive_status */
    tag_15:
      sload(0x02)
      dup2
      jump	// out
        /* "signaltest_afterparse.sol":1807:2059  function bindfunc() public view {... */
    tag_17:
        /* "signaltest_afterparse.sol":1843:1862  address dut_address */
      0x00
        /* "signaltest_afterparse.sol":1873:1876  dut */
      dup1
      0x00
      swap1
      sload
      swap1
      0x0100
      exp
      swap1
      div
      0xffffffffffffffffffffffffffffffffffffffff
      and
        /* "signaltest_afterparse.sol":1843:1877  address dut_address = address(dut) */
      swap1
      pop
        /* "signaltest_afterparse.sol":1881:1912  bytes32 dut_priceFeedUpdate_key */
      0x00
        /* "signaltest_afterparse.sol":1915:1918  dut */
      dup1
      0x00
      swap1
      sload
      swap1
      0x0100
      exp
      swap1
      div
      0xffffffffffffffffffffffffffffffffffffffff
      and
        /* "signaltest_afterparse.sol":1915:1942  dut.get_priceFeedUpdate_key */
      0xffffffffffffffffffffffffffffffffffffffff
      and
      0xbab3affe
        /* "signaltest_afterparse.sol":1915:1944  dut.get_priceFeedUpdate_key() */
      mload(0x40)
      dup2
      0xffffffff
      and
      0xe0
      shl
      dup2
      mstore
      0x04
      add
      0x20
      mload(0x40)
      dup1
      dup4
      sub
      dup2
      dup7
      dup1
      extcodesize
      iszero
      dup1
      iszero
      tag_29
      jumpi
      0x00
      dup1
      revert
    tag_29:
      pop
      gas
      staticcall
      iszero
      dup1
      iszero
      tag_31
      jumpi
      returndatasize
      0x00
      dup1
      returndatacopy
      revert(0x00, returndatasize)
    tag_31:
      pop
      pop
      pop
      pop
      mload(0x40)
      returndatasize
      0x20
      dup2
      lt
      iszero
      tag_32
      jumpi
      0x00
      dup1
      revert
    tag_32:
      dup2
      add
      swap1
      dup1
      dup1
      mload
      swap1
      0x20
      add
      swap1
      swap3
      swap2
      swap1
      pop
      pop
      pop
        /* "signaltest_afterparse.sol":1881:1944  bytes32 dut_priceFeedUpdate_key = dut.get_priceFeedUpdate_key() */
      swap1
      pop
        /* "signaltest_afterparse.sol":2024:2045  priceReceive_key_slot */
      0x03
        /* "signaltest_afterparse.sol":2018:2046  sload(priceReceive_key_slot) */
      sload
        /* "signaltest_afterparse.sol":1994:2017  dut_priceFeedUpdate_key */
      dup2
        /* "signaltest_afterparse.sol":1982:1993  dut_address */
      dup4
        /* "signaltest_afterparse.sol":1974:2047  bindsig(dut_address,dut_priceFeedUpdate_key,sload(priceReceive_key_slot)) */
      bindsig
        /* "signaltest_afterparse.sol":1969:1973  0x40 */
      0x40
        /* "signaltest_afterparse.sol":1962:2048  mstore(0x40,bindsig(dut_address,dut_priceFeedUpdate_key,sload(priceReceive_key_slot))) */
      mstore
        /* "signaltest_afterparse.sol":1957:2055  {... */
      pop
      pop
      jump	// out
        /* "signaltest_afterparse.sol":1343:1371  bytes32 public LocalPriceSum */
    tag_19:
      sload(0x01)
      dup2
      jump	// out
        /* "signaltest_afterparse.sol":2064:2319  function detachfunc() public view {... */
    tag_21:
        /* "signaltest_afterparse.sol":2102:2133  bytes32 dut_priceFeedUpdate_key */
      0x00
        /* "signaltest_afterparse.sol":2136:2139  dut */
      dup1
      0x00
      swap1
      sload
      swap1
      0x0100
      exp
      swap1
      div
      0xffffffffffffffffffffffffffffffffffffffff
      and
        /* "signaltest_afterparse.sol":2136:2163  dut.get_priceFeedUpdate_key */
      0xffffffffffffffffffffffffffffffffffffffff
      and
      0xbab3affe
        /* "signaltest_afterparse.sol":2136:2165  dut.get_priceFeedUpdate_key() */
      mload(0x40)
      dup2
      0xffffffff
      and
      0xe0
      shl
      dup2
      mstore
      0x04
      add
      0x20
      mload(0x40)
      dup1
      dup4
      sub
      dup2
      dup7
      dup1
      extcodesize
      iszero
      dup1
      iszero
      tag_34
      jumpi
      0x00
      dup1
      revert
    tag_34:
      pop
      gas
      staticcall
      iszero
      dup1
      iszero
      tag_36
      jumpi
      returndatasize
      0x00
      dup1
      returndatacopy
      revert(0x00, returndatasize)
    tag_36:
      pop
      pop
      pop
      pop
      mload(0x40)
      returndatasize
      0x20
      dup2
      lt
      iszero
      tag_37
      jumpi
      0x00
      dup1
      revert
    tag_37:
      dup2
      add
      swap1
      dup1
      dup1
      mload
      swap1
      0x20
      add
      swap1
      swap3
      swap2
      swap1
      pop
      pop
      pop
        /* "signaltest_afterparse.sol":2102:2165  bytes32 dut_priceFeedUpdate_key = dut.get_priceFeedUpdate_key() */
      swap1
      pop
        /* "signaltest_afterparse.sol":2169:2188  address dut_address */
      0x00
        /* "signaltest_afterparse.sol":2199:2202  dut */
      dup1
      0x00
      swap1
      sload
      swap1
      0x0100
      exp
      swap1
      div
      0xffffffffffffffffffffffffffffffffffffffff
      and
        /* "signaltest_afterparse.sol":2169:2203  address dut_address = address(dut) */
      swap1
      pop
        /* "signaltest_afterparse.sol":2284:2305  priceReceive_key_slot */
      0x03
        /* "signaltest_afterparse.sol":2278:2306  sload(priceReceive_key_slot) */
      sload
        /* "signaltest_afterparse.sol":2254:2277  dut_priceFeedUpdate_key */
      dup3
        /* "signaltest_afterparse.sol":2242:2253  dut_address */
      dup3
        /* "signaltest_afterparse.sol":2232:2307  detachsig(dut_address,dut_priceFeedUpdate_key,sload(priceReceive_key_slot)) */
      detachsig
        /* "signaltest_afterparse.sol":2227:2231  0x40 */
      0x40
        /* "signaltest_afterparse.sol":2220:2308  mstore(0x40,detachsig(dut_address,dut_priceFeedUpdate_key,sload(priceReceive_key_slot))) */
      mstore
        /* "signaltest_afterparse.sol":2215:2312  {... */
      pop
      pop
      jump	// out
        /* "signaltest_afterparse.sol":1492:1718  function priceReceive() public{... */
    tag_23:
        /* "signaltest_afterparse.sol":1551:1583  keccak256("priceReceive_func()") */
      mload(0x40)
      dup1
      dup1
      0x7072696365526563656976655f66756e63282900000000000000000000000000
      dup2
      mstore
      pop
      0x13
      add
      swap1
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      keccak256
        /* "signaltest_afterparse.sol":1532:1548  priceReceive_key */
      0x03
        /* "signaltest_afterparse.sol":1532:1583  priceReceive_key = keccak256("priceReceive_func()") */
      dup2
      swap1
      sstore
      pop
        /* "signaltest_afterparse.sol":1676:1697  priceReceive_key_slot */
      0x03
        /* "signaltest_afterparse.sol":1670:1698  sload(priceReceive_key_slot) */
      sload
        /* "signaltest_afterparse.sol":1664:1669  30000 */
      0x7530
        /* "signaltest_afterparse.sol":1661:1663  10 */
      0x0a
        /* "signaltest_afterparse.sol":1659:1660  0 */
      0x00
        /* "signaltest_afterparse.sol":1648:1699  createslot(0,10,30000,sload(priceReceive_key_slot)) */
      createslot
        /* "signaltest_afterparse.sol":1623:1647  priceReceive_status_slot */
      0x02
        /* "signaltest_afterparse.sol":1616:1700  sstore(priceReceive_status_slot,createslot(0,10,30000,sload(priceReceive_key_slot))) */
      sstore
        /* "signaltest_afterparse.sol":1602:1710  {... */
      jump	// out
        /* "signaltest_afterparse.sol":1723:1805  function priceReceive_func() public{... */
    tag_25:
        /* "signaltest_afterparse.sol":1785:1798  LocalPriceSum */
      sload(0x01)
        /* "signaltest_afterparse.sol":1784:1798  ~LocalPriceSum */
      not
        /* "signaltest_afterparse.sol":1768:1781  LocalPriceSum */
      0x01
        /* "signaltest_afterparse.sol":1768:1798  LocalPriceSum = ~LocalPriceSum */
      dup2
      swap1
      sstore
      pop
        /* "signaltest_afterparse.sol":1723:1805  function priceReceive_func() public{... */
      jump	// out
        /* "signaltest_afterparse.sol":1455:1486  bytes32 public priceReceive_key */
    tag_27:
      sload(0x03)
      dup2
      jump	// out

    auxdata: 0xa264697066735822122052ed3f87c669a41c9ff1125f8690d609260c944b97392d24c3e01665bfff6ae664736f6c637828302e362e31312d646576656c6f702e323032302e372e31382b636f6d6d69742e63663038346332330059
}
